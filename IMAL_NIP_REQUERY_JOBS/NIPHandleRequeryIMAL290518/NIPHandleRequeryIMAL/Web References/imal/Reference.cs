//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NIPHandleRequeryIMAL.imal {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NIBankingClientServiceSoapBinding", Namespace="http://service.client.remote.nibanking.sterlingbankng.com/")]
    public partial class NIBankingClientService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getAccountDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ftSingleCreditRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchTransactionDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback requeryOperationCompleted;
        
        private System.Threading.SendOrPostCallback nameEnquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback reverseOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchTransactionDetails2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NIBankingClientService() {
            this.Url = global::NIPHandleRequeryIMAL.Properties.Settings.Default.NIPHandleRequeryIMAL_imal_NIBankingClientService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getAccountDetailsCompletedEventHandler getAccountDetailsCompleted;
        
        /// <remarks/>
        public event ftSingleCreditRequestCompletedEventHandler ftSingleCreditRequestCompleted;
        
        /// <remarks/>
        public event fetchTransactionDetailsCompletedEventHandler fetchTransactionDetailsCompleted;
        
        /// <remarks/>
        public event requeryCompletedEventHandler requeryCompleted;
        
        /// <remarks/>
        public event nameEnquiryCompletedEventHandler nameEnquiryCompleted;
        
        /// <remarks/>
        public event reverseCompletedEventHandler reverseCompleted;
        
        /// <remarks/>
        public event fetchTransactionDetails2CompletedEventHandler fetchTransactionDetails2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getAccountDetails([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string accountNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("getAccountDetails", new object[] {
                        accountNumber,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAccountDetailsAsync(string accountNumber, string keyExchange) {
            this.getAccountDetailsAsync(accountNumber, keyExchange, null);
        }
        
        /// <remarks/>
        public void getAccountDetailsAsync(string accountNumber, string keyExchange, object userState) {
            if ((this.getAccountDetailsOperationCompleted == null)) {
                this.getAccountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAccountDetailsOperationCompleted);
            }
            this.InvokeAsync("getAccountDetails", new object[] {
                        accountNumber,
                        keyExchange}, this.getAccountDetailsOperationCompleted, userState);
        }
        
        private void OngetAccountDetailsOperationCompleted(object arg) {
            if ((this.getAccountDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAccountDetailsCompleted(this, new getAccountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ftSingleCreditRequest([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string senderName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string toAccount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string amount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string paymentReference, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string narration, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("ftSingleCreditRequest", new object[] {
                        sessionID,
                        senderName,
                        toAccount,
                        amount,
                        paymentReference,
                        narration,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ftSingleCreditRequestAsync(string sessionID, string senderName, string toAccount, string amount, string paymentReference, string narration, string keyExchange) {
            this.ftSingleCreditRequestAsync(sessionID, senderName, toAccount, amount, paymentReference, narration, keyExchange, null);
        }
        
        /// <remarks/>
        public void ftSingleCreditRequestAsync(string sessionID, string senderName, string toAccount, string amount, string paymentReference, string narration, string keyExchange, object userState) {
            if ((this.ftSingleCreditRequestOperationCompleted == null)) {
                this.ftSingleCreditRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnftSingleCreditRequestOperationCompleted);
            }
            this.InvokeAsync("ftSingleCreditRequest", new object[] {
                        sessionID,
                        senderName,
                        toAccount,
                        amount,
                        paymentReference,
                        narration,
                        keyExchange}, this.ftSingleCreditRequestOperationCompleted, userState);
        }
        
        private void OnftSingleCreditRequestOperationCompleted(object arg) {
            if ((this.ftSingleCreditRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ftSingleCreditRequestCompleted(this, new ftSingleCreditRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fetchTransactionDetails([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string transactionReferenceIdentifier, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string accountNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("fetchTransactionDetails", new object[] {
                        transactionReferenceIdentifier,
                        accountNumber,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchTransactionDetailsAsync(string transactionReferenceIdentifier, string accountNumber, string keyExchange) {
            this.fetchTransactionDetailsAsync(transactionReferenceIdentifier, accountNumber, keyExchange, null);
        }
        
        /// <remarks/>
        public void fetchTransactionDetailsAsync(string transactionReferenceIdentifier, string accountNumber, string keyExchange, object userState) {
            if ((this.fetchTransactionDetailsOperationCompleted == null)) {
                this.fetchTransactionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchTransactionDetailsOperationCompleted);
            }
            this.InvokeAsync("fetchTransactionDetails", new object[] {
                        transactionReferenceIdentifier,
                        accountNumber,
                        keyExchange}, this.fetchTransactionDetailsOperationCompleted, userState);
        }
        
        private void OnfetchTransactionDetailsOperationCompleted(object arg) {
            if ((this.fetchTransactionDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchTransactionDetailsCompleted(this, new fetchTransactionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string requery([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string transactionReferenceIdentifier, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("requery", new object[] {
                        transactionReferenceIdentifier,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void requeryAsync(string transactionReferenceIdentifier, string keyExchange) {
            this.requeryAsync(transactionReferenceIdentifier, keyExchange, null);
        }
        
        /// <remarks/>
        public void requeryAsync(string transactionReferenceIdentifier, string keyExchange, object userState) {
            if ((this.requeryOperationCompleted == null)) {
                this.requeryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequeryOperationCompleted);
            }
            this.InvokeAsync("requery", new object[] {
                        transactionReferenceIdentifier,
                        keyExchange}, this.requeryOperationCompleted, userState);
        }
        
        private void OnrequeryOperationCompleted(object arg) {
            if ((this.requeryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requeryCompleted(this, new requeryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string nameEnquiry([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string accountNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("nameEnquiry", new object[] {
                        accountNumber,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void nameEnquiryAsync(string accountNumber, string keyExchange) {
            this.nameEnquiryAsync(accountNumber, keyExchange, null);
        }
        
        /// <remarks/>
        public void nameEnquiryAsync(string accountNumber, string keyExchange, object userState) {
            if ((this.nameEnquiryOperationCompleted == null)) {
                this.nameEnquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnameEnquiryOperationCompleted);
            }
            this.InvokeAsync("nameEnquiry", new object[] {
                        accountNumber,
                        keyExchange}, this.nameEnquiryOperationCompleted, userState);
        }
        
        private void OnnameEnquiryOperationCompleted(object arg) {
            if ((this.nameEnquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.nameEnquiryCompleted(this, new nameEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string reverse([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string account, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string amount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("reverse", new object[] {
                        sessionID,
                        account,
                        amount,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void reverseAsync(string sessionID, string account, string amount, string keyExchange) {
            this.reverseAsync(sessionID, account, amount, keyExchange, null);
        }
        
        /// <remarks/>
        public void reverseAsync(string sessionID, string account, string amount, string keyExchange, object userState) {
            if ((this.reverseOperationCompleted == null)) {
                this.reverseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreverseOperationCompleted);
            }
            this.InvokeAsync("reverse", new object[] {
                        sessionID,
                        account,
                        amount,
                        keyExchange}, this.reverseOperationCompleted, userState);
        }
        
        private void OnreverseOperationCompleted(object arg) {
            if ((this.reverseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reverseCompleted(this, new reverseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", ResponseNamespace="http://service.client.remote.nibanking.sterlingbankng.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fetchTransactionDetails2([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string transactionReferenceIdentifier, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string branchCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string customerNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string currencyCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ledgerCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string subAccount, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string keyExchange) {
            object[] results = this.Invoke("fetchTransactionDetails2", new object[] {
                        transactionReferenceIdentifier,
                        branchCode,
                        customerNumber,
                        currencyCode,
                        ledgerCode,
                        subAccount,
                        keyExchange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchTransactionDetails2Async(string transactionReferenceIdentifier, string branchCode, string customerNumber, string currencyCode, string ledgerCode, string subAccount, string keyExchange) {
            this.fetchTransactionDetails2Async(transactionReferenceIdentifier, branchCode, customerNumber, currencyCode, ledgerCode, subAccount, keyExchange, null);
        }
        
        /// <remarks/>
        public void fetchTransactionDetails2Async(string transactionReferenceIdentifier, string branchCode, string customerNumber, string currencyCode, string ledgerCode, string subAccount, string keyExchange, object userState) {
            if ((this.fetchTransactionDetails2OperationCompleted == null)) {
                this.fetchTransactionDetails2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchTransactionDetails2OperationCompleted);
            }
            this.InvokeAsync("fetchTransactionDetails2", new object[] {
                        transactionReferenceIdentifier,
                        branchCode,
                        customerNumber,
                        currencyCode,
                        ledgerCode,
                        subAccount,
                        keyExchange}, this.fetchTransactionDetails2OperationCompleted, userState);
        }
        
        private void OnfetchTransactionDetails2OperationCompleted(object arg) {
            if ((this.fetchTransactionDetails2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchTransactionDetails2Completed(this, new fetchTransactionDetails2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void getAccountDetailsCompletedEventHandler(object sender, getAccountDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAccountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAccountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ftSingleCreditRequestCompletedEventHandler(object sender, ftSingleCreditRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ftSingleCreditRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ftSingleCreditRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void fetchTransactionDetailsCompletedEventHandler(object sender, fetchTransactionDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchTransactionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchTransactionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void requeryCompletedEventHandler(object sender, requeryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class requeryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal requeryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void nameEnquiryCompletedEventHandler(object sender, nameEnquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class nameEnquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal nameEnquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void reverseCompletedEventHandler(object sender, reverseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reverseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reverseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void fetchTransactionDetails2CompletedEventHandler(object sender, fetchTransactionDetails2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchTransactionDetails2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchTransactionDetails2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591