using System;
using System.Web;
using System.Collections;
using System.Web.Services;
using System.Web.Services.Protocols;
using BankDLL;
using System.Threading;
using System.Data;
using System.Xml;

[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
public class sbp_nibss : System.Web.Services.WebService {

    MyEncryDecr m = new MyEncryDecr();
    TR_BulkFundTransferDC bft;
    TR_BulkNameEnquiry bne;
    TransactionService tsv = new TransactionService();
    TR_SingleStatusQuery trx = new TR_SingleStatusQuery();
    AccountService acs = new AccountService();
    static string actualaccount;
    [WebMethod]
    public string balanceenquiry(string request)
    {
        int check = 0;
        TR_Balanceenquiry trx = new TR_Balanceenquiry();
        trx.xml = request;
        //new ErrorLog("Nibss:" + request);
        if (!trx.readRequest())
        {
            trx.ResponseCode = "30";
            return trx.createResponse();
        }
        else
        {
            try
            {
                //check if the account number is equal to 10 (NUBAN)
                //if equal to 10 then get the corresponding customer account
                NubanServices nu = new NubanServices();
                
                if (trx.AccountNumber.Length == 10)
                {
                    check = 1;
                    actualaccount = trx.AccountNumber;
                    trx.AccountNumber = nu.NubanNumber(trx.AccountNumber);
                }
                //check if the account exist with sterling bank
                sbp.banks b = new sbp.banks();
                DataSet ds = b.getBalanceDetails(trx.AccountNumber);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];
                    string cusNam = dr["cus_sho_name"].ToString().Trim();
                    if (cusNam.ToLower() == trx.AccountName.ToLower())
                    {
                        trx.AccountName = dr["cus_sho_name"].ToString();
                        trx.AvailableBalance = dr["avail_bal"].ToString();
                        trx.ResponseCode = "00";
                    }
                    else
                    {
                        //name mismatch
                        trx.AccountName = "Name Mismatch";
                        trx.ResponseCode = "08";
                        return trx.createResponse();
                    }
                }
                else
                {
                    trx.AccountName = "Invalid Account";
                    trx.ResponseCode = "07";
                }
            }
            catch (Exception ex)
            {
                ErrorLog err = new ErrorLog(ex);
            }
            if (check == 1)
            {
                trx.AccountNumber = actualaccount;
            }
           return trx.createResponse();
        }
    }
    [WebMethod]
    public string nameenquirysingleitem(string request)
    {
        Gadget g = new Gadget();
        int check = 0;
        DataSet ds = new DataSet();
        TR_SingleNameEnquiry trx = new TR_SingleNameEnquiry();
        trx.xml = request;
        string bra_code="";
        string cus_num="";
        string cur_code="";
        string led_code="";
        string sub_acct_code="";
        int rest_ind = 0;
        if (!trx.readRequest())
        {
            trx.ResponseCode = "30";
            return trx.createResponse();
        }
        //sandbox test with NIBSS
       // if (trx.AccountNumber == "1010101010101010101")
        //{
            //trx.AccountName = "Sterling Test Account";
            //trx.ResponseCode = "00";
            //return trx.createResponse();
        //}
       // else
        //{//here
        SBPSwitch sbp = new SBPSwitch();
        int sbpVal = sbp.getInternalBankID(trx.AccountNumber);

        string actualAcctNum = "";
        if (sbpVal == 1)
        {
            //check if the account number is equal to 10 (NUBAN)
            //if equal to 10 then get the corresponding customer account
            NubanServices nu = new NubanServices();
            if (trx.AccountNumber.Length == 10)
            {
                check = 1;
                actualAcctNum = trx.AccountNumber;
                trx.AccountNumber = nu.NubanNumber(trx.AccountNumber);
            }

            try
            {
                sbp.banks b = new sbp.banks();
                ds = b.getBalanceDetails(trx.AccountNumber);
            }
            catch (Exception ex)
            {
                ErrorLog err = new ErrorLog(ex);
            }

            int vhu = 0;
            try
            {
                vhu = ds.Tables[0].Rows.Count;
            }
            catch
            {

            }
            if (vhu == 0)
            {
                trx.AccountName = "";
                trx.ResponseCode = "07";
                return trx.createResponse();
            }

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataRow dr = ds.Tables[0].Rows[0];
                trx.AccountName = dr["cus_sho_name"].ToString();
                bra_code = dr["bra_code"].ToString();
                cus_num = dr["cus_num"].ToString();
                cur_code = dr["cur_code"].ToString();
                led_code = dr["led_code"].ToString();
                sub_acct_code = dr["sub_acct_code"].ToString();
                rest_ind = int.Parse(dr["rest_ind"].ToString());
                trx.ResponseCode = "00";

                if (rest_ind == 2 || rest_ind == 3 || rest_ind == 6 || rest_ind == 7)
                {
                    trx.AccountName = "";
                    trx.ResponseCode = "58";
                    return trx.createResponse();
                }

                if (cur_code != "1")
                {
                    trx.AccountName = "";
                    trx.ResponseCode = "57";
                    return trx.createResponse();
                }
                long cnu = Convert.ToInt64(cus_num);
                if (cnu < 20000)
                {
                    trx.AccountName = "";
                    trx.ResponseCode = "05";
                    return trx.createResponse();
                }

                Connect c = new Connect("spd_WSInserttrans");
                c.addparam("@sessionid", trx.SessionID);
                c.addparam("@bra_code", bra_code);
                c.addparam("@cus_num", cus_num);
                c.addparam("@cur_code", cur_code);
                c.addparam("@led_code", led_code);
                c.addparam("@sub_acct_code", sub_acct_code);
                c.addparam("@Transnature", 0);
                c.addparam("@batchNum", "");
                c.addparam("@originBankCode", trx.DestinationBankCode);
                c.addparam("@channelCode", trx.ChannelCode);
                c.addparam("@transtype", "Name Enquiry Request-Single Item");
                c.addparam("@status", 0);
                c.query();
            }
            else
            {
                trx.AccountName = "";
                trx.ResponseCode = "07";
            }
            //}
            if (check == 1)
            {
                trx.AccountNumber = actualAcctNum;
            }

            //update with response
            Connect c2 = new Connect("spd_WSupdatetrans");
            c2.addparam("@sessionid", trx.SessionID);
            c2.addparam("@bra_code", bra_code);
            c2.addparam("@cus_num", cus_num);
            c2.addparam("@cur_code", cur_code);
            c2.addparam("@led_code", led_code);
            c2.addparam("@sub_acct_code", sub_acct_code);
            c2.addparam("@amt", 0);
            c2.addparam("@payRef", "");
            c2.addparam("@manRef", "");
            c2.addparam("@remark", "");
            c2.addparam("@originSender", "");
            c2.addparam("@Responsecode", trx.ResponseCode);
            c2.addparam("@accname", trx.AccountName);
            c2.addparam("@feecharge", 0);
            c2.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
            c2.query();
            return trx.createResponse();
        }
        else if (sbpVal == 2)
        {
            //call webservice
            string rsp = "";
            imal.NIBankingClientService im = new imal.NIBankingClientService();
            trx.AccountNumber = m.Encrypt(trx.AccountNumber, "1239879000");
            rsp = im.nameEnquiry(trx.AccountNumber, "xx");
            rsp = m.Decrypt(rsp, "1239879000");
            new ErrorLog("Response gotten for IMAL Name enquiry for account " + m.Decrypt(trx.AccountNumber, "1239879000") + " is " + rsp);
            trx.AccountNumber = m.Decrypt(trx.AccountNumber, "1239879000");
            string[] bits = rsp.Split(':');
            trx.AccountName = bits[1];
            trx.ResponseCode = bits[2];
            return trx.createResponse();
        }
        else
        {
            trx.AccountName = "";
            trx.ResponseCode = "26";
            return trx.createResponse();
        }
        //}
    }

    [WebMethod]
    public string fundtransferbulkitem_dc(string request)
    {
        bft = new TR_BulkFundTransferDC();
        bft.xml = request;
        if (!bft.readRequest())
        {
            bft.ResponseCode = "30";
            return bft.createResponse();
        }
        if (bft.BatchNumber == "1010101010101010101")
        {
            Thread worker = new Thread(new ThreadStart(do_fundtransferbulkitem_dc));
            worker.Start();
            bft.ResponseCode = "09";
            return bft.createResponse();
        }
        else
        {
            Thread worker = new Thread(new ThreadStart(do_fundtransferbulkitem_dc));
            worker.Start();
            bft.ResponseCode = "09";
            return bft.createResponse();
        }
    }

    [WebMethod]
    public string fundtransfersingleitem_dd(string request)
    {
        int check = 0;
        TR_SingleFundTransferDD trx = new TR_SingleFundTransferDD();
        trx.xml = request;
        string bra_code = "";
        string cus_num = "";
        string cur_code = "";
        string led_code = "";
        string sub_acct_code = "";

        string TSS_cus_num = "";
        string TSS_cur_code = "";
        string TSS_led_code = "";
        string TSS_sub_acct_code = "";
        
        if (!trx.readRequest())
        {
            trx.ResponseCode = "30";
            return trx.createResponse();
        }

        //check if the account number is equal to 10 (NUBAN)
        //if equal to 10 then get the corresponding customer account
        NubanServices nu = new NubanServices();
        if (trx.AccountNumber.Length == 10)
        {
            check = 1;
            actualaccount = trx.AccountNumber;
            trx.AccountNumber = nu.NubanNumber(trx.AccountNumber);
        }
        sbp.banks b = new sbp.banks();
        DataSet ds = b.getBalanceDetails(trx.AccountNumber);
        //get customer details from BANKS
        if (ds.Tables[0].Rows.Count > 0)
        {
            DataRow dr = ds.Tables[0].Rows[0];
            string cusNam = dr["cus_sho_name"].ToString().Trim();
            if (cusNam == trx.AccountName.ToUpper())
            {
                trx.AccountName = dr["cus_sho_name"].ToString();
                bra_code = dr["bra_code"].ToString();
                cus_num = dr["cus_num"].ToString();
                cur_code = dr["cur_code"].ToString();
                led_code = dr["led_code"].ToString();
                sub_acct_code = dr["sub_acct_code"].ToString();
                //log the incoming request to tbl_WStrans
                Connect c = new Connect("spd_WSInserttrans_DD");
                c.addparam("@sessionid", trx.SessionID);
                c.addparam("@bra_code", bra_code);
                c.addparam("@cus_num", cus_num);
                c.addparam("@cur_code", cur_code);
                c.addparam("@led_code", led_code);
                c.addparam("@sub_acct_code", sub_acct_code);
                c.addparam("@Transnature", 0);
                c.addparam("@batchNum", "");
                c.addparam("@originBankCode", trx.DestinationBankCode);
                c.addparam("@channelCode", trx.ChannelCode);
                c.addparam("@status", 0);
                c.addparam("@mandateRefNum", trx.MandateReferenceNumber);
                c.addparam("@BillerID", trx.BillerID);
                c.addparam("@BillerName", trx.BillerName);
                c.query();
            }
            else
            {
                trx.AccountName = "Name Mismatch";
                trx.ResponseCode = "08";
                return trx.createResponse();
            }
        }
        else
        {
            trx.ResponseCode = "07";
            return trx.createResponse();
        }
        Gadget g = new Gadget();
        //prepare to send to debiting
        AccountService acs = new AccountService();

        Transaction t = new Transaction();
        t.inCust.bra_code = bra_code;
        t.inCust.cus_num = cus_num;
        t.inCust.cur_code = cur_code;
        t.inCust.led_code = led_code;
        t.inCust.sub_acct_code = sub_acct_code;
        t.amount = decimal.Parse(trx.Amount);
        t.tellerID = "9990"; //remember to get a teller id
        t.Remark = g.GetBankNames(trx.SessionID.Substring(0, 3)) + " Trns type:Debit";
        //acs.authorizeTrnxToSterling_DD(t);

        //check if TSS has sufficient Balance to cater for the Transaction amount
        TransactionService ts = new TransactionService();
        DataSet dsTss = ts.getCurrentTss();

        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];

            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }

        //check to ensure that the TSS account is well funded to accomodate Transactions to Sterling Bank
        AccountService atss = new AccountService();
        Account bal = new Account();
        bal.bra_code = bra_code;
        bal.cus_num = TSS_cus_num;
        bal.cur_code = TSS_cur_code;
        bal.led_code = TSS_led_code;
        bal.sub_acct_code = TSS_sub_acct_code;

        bal = atss.getBalance(bal);
        if (bal.cle_bal < decimal.Parse(trx.Amount))
        {
            trx.ResponseCode = "51";
            trx.AccountName = "No sufficient funds in TSS account";
            return trx.createResponse();
        }
        t.sessionid = trx.SessionID;
        acs.authorizeTrnxToSterling(t);

        if (acs.Respreturnedcode1 == "0")
        {
            trx.ResponseCode = "00";
            trx.Amount = acs.RespCreditedamt;// g.TRUmoneyToISOmoney(Convert.ToDecimal(acs.RespCreditedamt));

            //log trnx
            Connect c = new Connect("spd_WSupdatetrans");
            c.addparam("@sessionid", trx.SessionID);
            c.addparam("@bra_code", bra_code);
            c.addparam("@cus_num", cus_num);
            c.addparam("@cur_code", cur_code);
            c.addparam("@led_code", led_code);
            c.addparam("@sub_acct_code", sub_acct_code);
            c.addparam("@amt", t.amount);
            c.addparam("@payRef", trx.PaymentReference);
            c.addparam("@manRef", trx.MandateReferenceNumber);
            c.addparam("@remark", trx.Narration);
            c.addparam("@originSender", trx.BillerName);
            c.addparam("@Responsecode", trx.ResponseCode);
            c.addparam("@accname", trx.AccountName);
            c.addparam("@feecharge", 0);
            c.query();
        }
        else
        {
            trx.ResponseCode = "21";
        }

        if (check == 1)
        {
            trx.AccountNumber = actualaccount;
        }
        return trx.createResponse();
    }

    protected void do_fundtransferbulkitem_dc()
    {
        TR_BulkFundTransferDC trx = bft;
        TR_BulkFundTransferNotificationDC rsp = new TR_BulkFundTransferNotificationDC();
        rsp.DestinationBankCode = trx.DestinationBankCode;
        rsp.ChannelCode = trx.ChannelCode;
        rsp.BatchNumber = trx.BatchNumber;
        rsp.NumberOfRecords = trx.NumberOfRecords;

        //check if batch exists

        rsp.createRequest();
        for (int i = 0; i < trx.Record.Length; i++)
        {
            Record r = trx.Record[i];
            bank2 b = new bank2();

            //do account enquiry
            b.Getcusname(r.AccountNumber);
            if (b.Responsecode == "00")
            {
                //account exists
                Connect c1 = new Connect("spd_WScheckpendingtrans");
                c1.addparam("@sessionid", r.RecID);
                c1.addparam("@bra_code", b.bra_code);
                c1.addparam("@cus_num", b.cus_num);
                c1.addparam("@cur_code", b.cur_code);
                c1.addparam("@led_code", b.led_code);
                c1.addparam("@sub_acct_code", b.sub_acct_code);
                DataSet ds = c1.query("trnx");
                if (ds.Tables[0].Rows.Count < 1)
                {
                    r.ResponseCode = "57";
                }
                else
                {
                    //trx is pending
                    //authorize -- send to banks
                    Gadget g = new Gadget();
                    //go to vTeller
                    AccountService acs = new AccountService();

                    Transaction t = new Transaction();
                    t.inCust.bra_code = b.bra_code;
                    t.inCust.cus_num = b.cus_num;
                    t.inCust.cur_code = b.cur_code;
                    t.inCust.led_code = b.led_code;
                    t.inCust.sub_acct_code = b.sub_acct_code;
                    t.amount= g.ISOmoneyToTRUmoney(r.Amount);
                    t.tellerID = "9990"; //remember to get a teller id
                    acs.authorizeTrnxToSterling(t);

                    if (acs.Respreturnedcode1 == "0")
                    {
                        r.ResponseCode = "00";
                        r.Amount = g.TRUmoneyToISOmoney(Convert.ToDecimal(acs.RespCreditedamt));

                        //log trnx
                        Connect c = new Connect("spd_WSupdatetrans");
                        c.addparam("@sessionid", r.RecID);
                        c.addparam("@bra_code", b.bra_code);
                        c.addparam("@cus_num", b.cus_num);
                        c.addparam("@cur_code", b.cur_code);
                        c.addparam("@led_code", b.led_code);
                        c.addparam("@sub_acct_code", b.sub_acct_code);
                        c.addparam("@amt", t.amount);
                        c.addparam("@payRef", r.PaymentReference);
                        c.addparam("@manRef", "");
                        c.addparam("@remark", r.Narration);
                        c.addparam("@originSender", r.OriginatorName);
                        c.query();
                    }
                    else
                    {
                        r.ResponseCode = "21";
                    }
                }
            }
            else
            {
                //wrong account
                r.ResponseCode = "07";
            }
            rsp.addRecord(r);
        }

        //make ft notification request
        rsp.sendRequest();
    }

    [WebMethod]
    public string nameenquirybulkitem(string request)
    {
        bne = new TR_BulkNameEnquiry();
        bne.xml = request;
        if (!bne.readRequest())
        {
            bne.ResponseCode = "30";
            return bne.createResponse();
        }
        if (bne.BatchNumber == "1010101010101010101")
        {
            Thread worker = new Thread(new ThreadStart(do_nameenquirybulkitem));
            worker.Start();

            bne.ResponseCode = "09";
            return bne.createResponse();
        }
        else
        {
            Thread worker = new Thread(new ThreadStart(do_nameenquirybulkitem));
            worker.Start();

            bne.ResponseCode = "09";
            return bne.createResponse();
        }
    }

    protected void do_nameenquirybulkitem()
    {
        TR_BulkNameEnquiry trx = bne;
        TR_BulkNameEnquiryNotification rsp = new TR_BulkNameEnquiryNotification();
        rsp.DestinationBankCode = trx.DestinationBankCode;
        rsp.ChannelCode = trx.ChannelCode;
        rsp.BatchNumber = trx.BatchNumber;
        rsp.NumberOfRecords = trx.NumberOfRecords;

        rsp.createRequest();

        //read thru the record
        for (int i = 0; i < trx.Record.Length; i++)
        {
            Record r = trx.Record[i];
            //check if this account exists for each
            bank2 b = new bank2();
            int status = 0;
            b.Getcusname(r.AccountNumber);
            if (b.Responsecode == "00")
            {
                r.AccountName = b.cus_sho_name;
                r.ResponseCode = "00";
                status = 1;
            }
            else
            {
                r.ResponseCode = "07";
                status = 0;
            }

            rsp.addRecord(r);
            //log to database
            Connect c = new Connect("spd_WSInserttrans");
            c.addparam("@sessionid", r.RecID);
            c.addparam("@bra_code", b.bra_code);
            c.addparam("@cus_num", b.cus_num);
            c.addparam("@cur_code", b.cur_code);
            c.addparam("@led_code", b.led_code);
            c.addparam("@sub_acct_code", b.sub_acct_code);
            c.addparam("@Transnature", 1);
            c.addparam("@batchNum", rsp.BatchNumber);
            c.addparam("@originBankCode", rsp.DestinationBankCode);
            c.addparam("@channelCode", rsp.ChannelCode);
            c.addparam("@status", status);
            c.query();
        }

        if (!rsp.sendRequest())
        {
            //request did not go!            
        }
        
    }
    public void updateInwardType(string sessionid, int inwardtype)
    {
        string sql = "update tbl_WStrans set inwardtype=@inw where sessionid=@sid";
        Connect c = new Connect(sql, true);
        c.addparam("@inw", inwardtype);
        c.addparam("@sid", sessionid);
        c.query();
    }
    [WebMethod]
    public string fundtransfersingleitem_dc(string request)
    {
        //for timestamp on trans above 20 seconds
        Int32 val = 0;
        DateTime startTime = DateTime.Now;
        //////////////////////////////////////
        int rest_ind = 0;
        int check = 0; int cust_type = 0;
        DataSet ds = new DataSet();
        TR_SingleFundTransferDC trx = new TR_SingleFundTransferDC();
        trx.xml = request;
        string bra_code = "";
        string cus_num = "";
        string cur_code = "";
        string led_code = "";
        string sub_acct_code = "";

        string TSS_bra_code = "";
        string TSS_cus_num = "";
        string TSS_cur_code = "";
        string TSS_led_code = "";
        string TSS_sub_acct_code = "";

        if (!trx.readRequest())
        {
            trx.ResponseCode = "30";
            return trx.createResponse();
        }
        SBPSwitch sbp = new SBPSwitch();
        int sbpVal = sbp.getInternalBankID(trx.AccountNumber);
        if (sbpVal == 1)
        {
            Gadget g = new Gadget();
            //CHK IF sessionid is unique
            Connect cx = new Connect("spd_CheckDuplicateSessionid2");
            cx.addparam("@sessionid", trx.SessionID);
            int donx = cx.query();
            if (donx == 0)
            {
                trx.ResponseCode = "26";
                new ErrorLog("DUPLICATE TRNX");
                new ErrorLog(trx.xml);
                return trx.createResponse();
            }

            Transaction t = new Transaction();
            //Update 28-AUG-12 ensure that the amount value is not 0 and not less than 0
            //decimal maxPerTrans = 0;
            //decimal maxPerday = 0; t.amount = 0;
            //decimal sum = 0; decimal balAmttobe = 0;
            //if (t.amount == 0 || t.amount < 0)
            //{
            //    trx.ResponseCode = "13";
            //    return trx.createResponse();
            //}

            //tsv.getTransactionLimits();
            //maxPerTrans = tsv.maxPerTrans;
            //maxPerday = tsv.maxPerday;
            //if (maxPerTrans == 0 || maxPerday == 0)
            //{
            //    trx.ResponseCode = "13";
            //    new ErrorLog("Transaction Aborted. Reason: unable to load maximum value per day/transaction");
            //    return trx.createResponse();
            //}
            //check if the amount to transfer is within the minimum amount to transfer
            //if (t.amount <= maxPerTrans)
            //{
            //    //check if the total transfer done by this customer has exceeded total of 10m
            //    tsv.getTotalSumdoneInward(bra_code, cus_num, cur_code, led_code, sub_acct_code, trx.SessionID.Substring(0, 3));
            //    sum = tsv.sum;
            //    if (maxPerday >= sum)
            //    {
            //        //check if the current amount to transfer + the amount transfered so far is greater thatn 10m
            //        balAmttobe = t.amount + sum;
            //        if (maxPerday >= balAmttobe)
            //        {
            //            //proceed
            //        }
            //        else
            //        {
            //            new ErrorLog("Sorry, this transaction will not be processed because the amount to transfer is greater than the balance if processed. balance if processed will be: " + balAmttobe.ToString() + " while maximum allowed tranfer per day is  " + maxPerday.ToString());
            //            trx.ResponseCode = "13";
            //            return trx.createResponse();
            //        }
            //    }
            //    else
            //    {
            //        new ErrorLog("Sorry, you have exceeded your transfer limit for the day " + maxPerday.ToString());
            //        trx.ResponseCode = "13";
            //        return trx.createResponse();
            //    }

            //}
            //else
            //{
            //    new ErrorLog("Sorry, you cannot transfer amount greater than " + maxPerTrans.ToString() + " per transaction ");
            //    trx.ResponseCode = "13";
            //    return trx.createResponse();
            //}


            //******************************************************************************

            //sandbox test with NIBSS
            //if (trx.AccountNumber == "1010101010101010101")
            //{
            //trx.AccountName = "Sterling Test Account";
            //trx.ResponseCode = "00";
            //return trx.createResponse();
            //}
            //else
            //{//here
            //check if the account number is equal to 10 (NUBAN)
            //if equal to 10 then get the corresponding customer account
            string actualAcctNum = "";
            NubanServices nu = new NubanServices();
            try
            {
                if (trx.AccountNumber.Length == 10)
                {
                    check = 1;
                    actualAcctNum = trx.AccountNumber;
                    trx.AccountNumber = nu.NubanNumber(trx.AccountNumber);
                    bra_code = nu.Frm_bra_code;
                    cus_num = nu.Frm_cus_num;
                    cur_code = nu.Frm_cur_code;
                    led_code = nu.Frm_led_code;
                    sub_acct_code = nu.Frm_sub_acct_code;
                }
            }
            catch (Exception ex)
            {
                DateTime endTime = DateTime.Now;
                TimeSpan span = endTime.Subtract(startTime);
                val = span.Seconds;
                if (val > 20)
                {
                    new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                }
                new ErrorLog(ex);
                trx.ResponseCode = "05";
                return trx.createResponse();
            }

            try
            {
                sbp.banks b = new sbp.banks();
                //ds = b.getBalanceDetails(trx.AccountNumber);
                ds = b.getBalanceDetails1(bra_code, cus_num, cur_code, led_code, sub_acct_code);
            }
            catch (Exception ex)
            {
                DateTime endTime = DateTime.Now;
                TimeSpan span = endTime.Subtract(startTime);
                val = span.Seconds;
                if (val > 20)
                {
                    new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                }
                ErrorLog err = new ErrorLog(ex);
                trx.ResponseCode = "05";
                return trx.createResponse();
            }

            decimal custBal = 0; int sta_code = 0;
            if (ds.Tables[0].Rows.Count > 0)
            {
                DataRow dr = ds.Tables[0].Rows[0];
                string cusNam = dr["cus_sho_name"].ToString().Trim();
                //if (cusNam == trx.AccountName.ToUpper())
                if (cusNam == trx.AccountName)
                {
                    trx.AccountName = dr["cus_sho_name"].ToString();
                    bra_code = dr["bra_code"].ToString();
                    cus_num = dr["cus_num"].ToString();
                    cur_code = dr["cur_code"].ToString();
                    led_code = dr["led_code"].ToString();
                    sub_acct_code = dr["sub_acct_code"].ToString();
                    custBal = decimal.Parse(dr["avail_bal"].ToString());
                    sta_code = int.Parse(dr["sta_code"].ToString());
                    rest_ind = int.Parse(dr["rest_ind"].ToString());
                    //cust_type = 1;// int.Parse(dr["cust_type"].ToString());
                    //trx.ResponseCode = "00";

                    //if (led_code != "9")
                    //{
                    //    trx.ResponseCode = "57";//Transaction not permitted to sender
                    //    return trx.createResponse();
                    //}



                    try
                    {
                        Connect c = new Connect("spd_WSInserttrans");
                        c.addparam("@sessionid", trx.SessionID);
                        c.addparam("@bra_code", bra_code);
                        c.addparam("@cus_num", cus_num);
                        c.addparam("@cur_code", cur_code);
                        c.addparam("@led_code", led_code);
                        c.addparam("@sub_acct_code", sub_acct_code);
                        c.addparam("@Transnature", 0);
                        c.addparam("@batchNum", "");
                        c.addparam("@originBankCode", trx.DestinationBankCode);
                        c.addparam("@channelCode", trx.ChannelCode);
                        c.addparam("@status", 0);
                        c.addparam("@transtype", "Fund Transfer Request:Direct Credit-Single Item");
                        c.addparam("@amt", decimal.Parse(trx.Amount));
                        int cv = c.query();

                        if (cv > 0)
                        {
                            trx.ResponseCode = "00";

                        }
                        else
                        {
                            DateTime endTime = DateTime.Now;
                            TimeSpan span = endTime.Subtract(startTime);
                            val = span.Seconds;
                            if (val > 20)
                            {
                                new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                            }
                            new ErrorLog("Error Occured Updating transaction for processing " + trx.SessionID);
                            trx.ResponseCode = "05";
                            return trx.createResponse();
                        }

                    }
                    catch (Exception ex)
                    {
                        new ErrorLog("Error occured while inserting DC for " + trx.SessionID);
                    }

                    //check for allowed restrictions
                    sbp.banks b1 = new sbp.banks();
                    int RestCode = -2;
                    RestCode = b1.getRestVal(bra_code, cus_num, cur_code, led_code, sub_acct_code);
                    if (RestCode == -1)
                    {
                        //proceed
                    }
                    else
                    {
                        //check get the account res indicator to know if it is allowed to receive credit
                        string sqlRst = "select RestCode from tbl_AllowedRest where RestCode in (@RestCode)";
                        Connect cR = new Connect(sqlRst, true);
                        cR.addparam("@RestCode", RestCode);
                        DataSet dsR = cR.query("rec");
                        if (dsR.Tables[0].Rows.Count == 0)
                        {
                            trx.ResponseCode = "57";
                            Connect c1 = new Connect("spd_WSupdatetrans");
                            c1.addparam("@sessionid", trx.SessionID);
                            c1.addparam("@bra_code", bra_code);
                            c1.addparam("@cus_num", cus_num);
                            c1.addparam("@cur_code", cur_code);
                            c1.addparam("@led_code", led_code);
                            c1.addparam("@sub_acct_code", sub_acct_code);
                            c1.addparam("@amt", t.amount);
                            c1.addparam("@payRef", trx.PaymentReference);
                            c1.addparam("@manRef", "");
                            c1.addparam("@remark", trx.Narration);
                            c1.addparam("@originSender", trx.OriginatorName);
                            c1.addparam("@Responsecode", trx.ResponseCode);
                            c1.addparam("@accname", trx.AccountName);
                            c1.addparam("@feecharge", 0);
                            c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                            c1.query();
                            DateTime endTime = DateTime.Now;
                            TimeSpan span = endTime.Subtract(startTime);
                            val = span.Seconds;
                            if (val > 20)
                            {
                                new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                            }
                            return trx.createResponse();
                        }
                    }
                    //if (rest_ind > 0)
                    //{
                    //    trx.ResponseCode = "57";
                    //    Connect c1 = new Connect("spd_WSupdatetrans");
                    //    c1.addparam("@sessionid", trx.SessionID);
                    //    c1.addparam("@bra_code", bra_code);
                    //    c1.addparam("@cus_num", cus_num);
                    //    c1.addparam("@cur_code", cur_code);
                    //    c1.addparam("@led_code", led_code);
                    //    c1.addparam("@sub_acct_code", sub_acct_code);
                    //    c1.addparam("@amt", t.amount);
                    //    c1.addparam("@payRef", trx.PaymentReference);
                    //    c1.addparam("@manRef", "");
                    //    c1.addparam("@remark", trx.Narration);
                    //    c1.addparam("@originSender", trx.OriginatorName);
                    //    c1.addparam("@Responsecode", trx.ResponseCode);
                    //    c1.addparam("@accname", trx.AccountName);
                    //    c1.addparam("@feecharge", 0);
                    //    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    //    c1.query();
                    //    DateTime endTime = DateTime.Now;
                    //    TimeSpan span = endTime.Subtract(startTime);
                    //    val = span.Seconds;
                    //    if (val > 20)
                    //    {
                    //        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    //    }
                    //    return trx.createResponse();
                    //}

                    //check account for restriction
                    //sbp.banks Rest = new sbp.banks();
                    //int dRestVal = Rest.CheckAcctforRestriction(bra_code, cus_num, cur_code, led_code, sub_acct_code);
                    //if (dRestVal > 0)
                    //{
                    //    trx.ResponseCode = "05";
                    //    Connect c1 = new Connect("spd_WSupdatetrans");
                    //    c1.addparam("@sessionid", trx.SessionID);
                    //    c1.addparam("@bra_code", bra_code);
                    //    c1.addparam("@cus_num", cus_num);
                    //    c1.addparam("@cur_code", cur_code);
                    //    c1.addparam("@led_code", led_code);
                    //    c1.addparam("@sub_acct_code", sub_acct_code);
                    //    c1.addparam("@amt", t.amount);
                    //    c1.addparam("@payRef", trx.PaymentReference);
                    //    c1.addparam("@manRef", "");
                    //    c1.addparam("@remark", trx.Narration);
                    //    c1.addparam("@originSender", trx.OriginatorName);
                    //    c1.addparam("@Responsecode", trx.ResponseCode);
                    //    c1.addparam("@accname", trx.AccountName);
                    //    c1.addparam("@feecharge", 0);
                    //    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    //    c1.query();
                    //    DateTime endTime = DateTime.Now;
                    //    TimeSpan span = endTime.Subtract(startTime);
                    //    val = span.Seconds;
                    //    if (val > 20)
                    //    {
                    //        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    //    }
                    //    return trx.createResponse();
                    //}

                    if (led_code == "1280" || led_code == "1281" || led_code == "1282" || led_code == "1283" || led_code == "1284" || led_code == "1285" || led_code == "1605" || led_code == "57" || led_code == "74")
                    {
                        trx.ResponseCode = "57";
                        Connect c1 = new Connect("spd_WSupdatetrans");
                        c1.addparam("@sessionid", trx.SessionID);
                        c1.addparam("@bra_code", bra_code);
                        c1.addparam("@cus_num", cus_num);
                        c1.addparam("@cur_code", cur_code);
                        c1.addparam("@led_code", led_code);
                        c1.addparam("@sub_acct_code", sub_acct_code);
                        c1.addparam("@amt", t.amount);
                        c1.addparam("@payRef", trx.PaymentReference);
                        c1.addparam("@manRef", "");
                        c1.addparam("@remark", trx.Narration);
                        c1.addparam("@originSender", trx.OriginatorName);
                        c1.addparam("@Responsecode", trx.ResponseCode);
                        c1.addparam("@accname", trx.AccountName);
                        c1.addparam("@feecharge", 0);
                        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                        c1.query();
                        DateTime endTime = DateTime.Now;
                        TimeSpan span = endTime.Subtract(startTime);
                        val = span.Seconds;
                        if (val > 20)
                        {
                            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                        }
                        return trx.createResponse();
                    }

                    if (sta_code == 2)
                    {
                        trx.ResponseCode = "57";
                        Connect c1 = new Connect("spd_WSupdatetrans");
                        c1.addparam("@sessionid", trx.SessionID);
                        c1.addparam("@bra_code", bra_code);
                        c1.addparam("@cus_num", cus_num);
                        c1.addparam("@cur_code", cur_code);
                        c1.addparam("@led_code", led_code);
                        c1.addparam("@sub_acct_code", sub_acct_code);
                        c1.addparam("@amt", t.amount);
                        c1.addparam("@payRef", trx.PaymentReference);
                        c1.addparam("@manRef", "");
                        c1.addparam("@remark", trx.Narration);
                        c1.addparam("@originSender", trx.OriginatorName);
                        c1.addparam("@Responsecode", trx.ResponseCode);
                        c1.addparam("@accname", trx.AccountName);
                        c1.addparam("@feecharge", 0);
                        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                        c1.query();
                        DateTime endTime = DateTime.Now;
                        TimeSpan span = endTime.Subtract(startTime);
                        val = span.Seconds;
                        if (val > 20)
                        {
                            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                        }
                        return trx.createResponse();
                    }

                    if (sta_code == 3)
                    {
                        trx.ResponseCode = "06";
                        Connect c1 = new Connect("spd_WSupdatetrans");
                        c1.addparam("@sessionid", trx.SessionID);
                        c1.addparam("@bra_code", bra_code);
                        c1.addparam("@cus_num", cus_num);
                        c1.addparam("@cur_code", cur_code);
                        c1.addparam("@led_code", led_code);
                        c1.addparam("@sub_acct_code", sub_acct_code);
                        c1.addparam("@amt", t.amount);
                        c1.addparam("@payRef", trx.PaymentReference);
                        c1.addparam("@manRef", "");
                        c1.addparam("@remark", trx.Narration);
                        c1.addparam("@originSender", trx.OriginatorName);
                        c1.addparam("@Responsecode", trx.ResponseCode);
                        c1.addparam("@accname", trx.AccountName);
                        c1.addparam("@feecharge", 0);
                        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                        c1.query();
                        DateTime endTime = DateTime.Now;
                        TimeSpan span = endTime.Subtract(startTime);
                        val = span.Seconds;
                        if (val > 20)
                        {
                            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                        }
                        return trx.createResponse();
                    }

                    //check if the sending bank is active in our list of participating bank
                    string Sid = trx.SessionID;
                    Sid = Sid.Substring(0, 3);
                    string sqlSid = "";
                    sqlSid = "select * from tbl_participatingBanks where bankcode = @bcode and statusflag=1";
                    Connect cSid = new Connect(sqlSid, true);
                    cSid.addparam("@bcode", Sid);
                    DataSet dsSid = cSid.query("rec");
                    if (dsSid.Tables[0].Rows.Count == 0)
                    {
                        trx.ResponseCode = "57";
                        Connect c1 = new Connect("spd_WSupdatetrans");
                        c1.addparam("@sessionid", trx.SessionID);
                        c1.addparam("@bra_code", bra_code);
                        c1.addparam("@cus_num", cus_num);
                        c1.addparam("@cur_code", cur_code);
                        c1.addparam("@led_code", led_code);
                        c1.addparam("@sub_acct_code", sub_acct_code);
                        c1.addparam("@amt", t.amount);
                        c1.addparam("@payRef", trx.PaymentReference);
                        c1.addparam("@manRef", "");
                        c1.addparam("@remark", trx.Narration);
                        c1.addparam("@originSender", trx.OriginatorName);
                        c1.addparam("@Responsecode", trx.ResponseCode);
                        c1.addparam("@accname", trx.AccountName);
                        c1.addparam("@feecharge", 0);
                        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                        c1.query();
                        DateTime endTime = DateTime.Now;
                        TimeSpan span = endTime.Subtract(startTime);
                        val = span.Seconds;
                        if (val > 20)
                        {
                            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                        }
                        return trx.createResponse();
                    }

                    if (cur_code != "1")
                    {
                        trx.ResponseCode = "57";
                        Connect c1 = new Connect("spd_WSupdatetrans");
                        c1.addparam("@sessionid", trx.SessionID);
                        c1.addparam("@bra_code", bra_code);
                        c1.addparam("@cus_num", cus_num);
                        c1.addparam("@cur_code", cur_code);
                        c1.addparam("@led_code", led_code);
                        c1.addparam("@sub_acct_code", sub_acct_code);
                        c1.addparam("@amt", t.amount);
                        c1.addparam("@payRef", trx.PaymentReference);
                        c1.addparam("@manRef", "");
                        c1.addparam("@remark", trx.Narration);
                        c1.addparam("@originSender", trx.OriginatorName);
                        c1.addparam("@Responsecode", trx.ResponseCode);
                        c1.addparam("@accname", trx.AccountName);
                        c1.addparam("@feecharge", 0);
                        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                        c1.query();
                        DateTime endTime = DateTime.Now;
                        TimeSpan span = endTime.Subtract(startTime);
                        val = span.Seconds;
                        if (val > 20)
                        {
                            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                        }
                        return trx.createResponse();
                    }
                    long cnu = Convert.ToInt64(cus_num);
                    if (cnu < 20000)
                    {
                        trx.ResponseCode = "05";
                        Connect c1 = new Connect("spd_WSupdatetrans");
                        c1.addparam("@sessionid", trx.SessionID);
                        c1.addparam("@bra_code", bra_code);
                        c1.addparam("@cus_num", cus_num);
                        c1.addparam("@cur_code", cur_code);
                        c1.addparam("@led_code", led_code);
                        c1.addparam("@sub_acct_code", sub_acct_code);
                        c1.addparam("@amt", t.amount);
                        c1.addparam("@payRef", trx.PaymentReference);
                        c1.addparam("@manRef", "");
                        c1.addparam("@remark", trx.Narration);
                        c1.addparam("@originSender", trx.OriginatorName);
                        c1.addparam("@Responsecode", trx.ResponseCode);
                        c1.addparam("@accname", trx.AccountName);
                        c1.addparam("@feecharge", 0);
                        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                        c1.query();
                        DateTime endTime = DateTime.Now;
                        TimeSpan span = endTime.Subtract(startTime);
                        val = span.Seconds;
                        if (val > 20)
                        {
                            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                        }
                        return trx.createResponse();
                    }


                }
                else
                {
                    trx.AccountName = "Name Mismatch";
                    trx.ResponseCode = "08";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
            }
            else
            {
                trx.ResponseCode = "07";
                Connect c1 = new Connect("spd_WSupdatetrans");
                c1.addparam("@sessionid", trx.SessionID);
                c1.addparam("@bra_code", bra_code);
                c1.addparam("@cus_num", cus_num);
                c1.addparam("@cur_code", cur_code);
                c1.addparam("@led_code", led_code);
                c1.addparam("@sub_acct_code", sub_acct_code);
                c1.addparam("@amt", t.amount);
                c1.addparam("@payRef", trx.PaymentReference);
                c1.addparam("@manRef", "");
                c1.addparam("@remark", trx.Narration);
                c1.addparam("@originSender", trx.OriginatorName);
                c1.addparam("@Responsecode", trx.ResponseCode);
                c1.addparam("@accname", trx.AccountName);
                c1.addparam("@feecharge", 0);
                c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                c1.query();
                DateTime endTime = DateTime.Now;
                TimeSpan span = endTime.Subtract(startTime);
                val = span.Seconds;
                if (val > 20)
                {
                    new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                }
                return trx.createResponse();
            }

            //update the transaction type against the sessionid
            updateInwardType(trx.SessionID, 1);

            //check if name request has been previously done for this transaction
            //remember to audit from stored proc
            //Connect c1 = new Connect("spd_WScheckpendingtrans");
            //c1.addparam("@sessionid", trx.SessionID);
            //c1.addparam("@bra_code", bra_code);
            //c1.addparam("@cus_num", cus_num);
            //c1.addparam("@cur_code", cur_code);
            //c1.addparam("@led_code", led_code);
            //c1.addparam("@sub_acct_code", sub_acct_code);
            //DataSet ds2 = c1.query("trnx");
            //if (ds2.Tables[0].Rows.Count < 1)
            //{
            //    trx.ResponseCode = "57";
            //    return trx.createResponse();
            //}

            //go to vTeller
            AccountService acs = new AccountService();

            //Transaction t = new Transaction();
            t.inCust.bra_code = bra_code;
            t.inCust.cus_num = cus_num;
            t.inCust.cur_code = cur_code;
            t.inCust.led_code = led_code;
            t.inCust.sub_acct_code = sub_acct_code;
            t.amount = decimal.Parse(trx.Amount);// g.ISOmoneyToTRUmoney(trx.Amount);
            t.tellerID = "9990"; //remember to get a teller id
            t.Remark = g.GetBankNames(trx.SessionID.Substring(0, 3)) + " Trns type:Credit";
            t.narration = trx.Narration;
            t.paymentRef = trx.PaymentReference;
            t.senderAcctname = trx.OriginatorName;


            //check if TSS has sufficient Balance to cater for the Transaction amount
            TransactionService ts = new TransactionService();
            DataSet dsTss = ts.getCurrentTss();

            if (dsTss.Tables[0].Rows.Count > 0)
            {
                DataRow drTss = dsTss.Tables[0].Rows[0];
                TSS_bra_code = drTss["bra_code"].ToString();
                TSS_cus_num = drTss["cusnum"].ToString();
                TSS_cur_code = drTss["curcode"].ToString();
                TSS_led_code = drTss["ledcode"].ToString();
                TSS_sub_acct_code = drTss["subacctcode"].ToString();
            }

            //check to ensure that the TSS account is well funded to accomodate Transactions to Sterling Bank
            AccountService atss = new AccountService();
            Account bal = new Account();
            //bal.bra_code = bra_code;
            bal.bra_code = TSS_bra_code;
            bal.cus_num = TSS_cus_num;
            bal.cur_code = TSS_cur_code;
            bal.led_code = TSS_led_code;
            bal.sub_acct_code = TSS_sub_acct_code;

            bal = atss.getBalance(bal);
            t.amount = decimal.Parse(trx.Amount);
            //if (bal.cle_bal < decimal.Parse(trx.Amount))
            if (bal.avail_bal < decimal.Parse(trx.Amount))
            {
                trx.ResponseCode = "51";
                trx.AccountName = "";

                Connect c = new Connect("spd_WSupdatetrans");
                c.addparam("@sessionid", trx.SessionID);
                c.addparam("@bra_code", bra_code);
                c.addparam("@cus_num", cus_num);
                c.addparam("@cur_code", cur_code);
                c.addparam("@led_code", led_code);
                c.addparam("@sub_acct_code", sub_acct_code);
                c.addparam("@amt", t.amount);
                c.addparam("@payRef", trx.PaymentReference);
                c.addparam("@manRef", "");
                c.addparam("@remark", trx.Narration);
                c.addparam("@originSender", trx.OriginatorName);
                c.addparam("@Responsecode", trx.ResponseCode);
                c.addparam("@accname", trx.AccountName);
                c.addparam("@feecharge", 0);
                c.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode) + "TSS bal: " + bal.avail_bal.ToString() + " " + " Trnx amount: " + trx.Amount);

                int cv1 = c.query();

                if (cv1 > 0)
                {
                    trx.ResponseCode = "00";

                }
                else
                {
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    new ErrorLog("Error Occured Updating transaction for processing " + trx.SessionID);
                    trx.ResponseCode = "05";
                    return trx.createResponse();
                }
                DateTime endTime1 = DateTime.Now;
                TimeSpan span1 = endTime1.Subtract(startTime);
                val = span1.Seconds;
                if (val > 20)
                {
                    new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                }
                return trx.createResponse();
            }
            t.sessionid = trx.SessionID;

            //check if the ledger is 84 if it is then check the amount
            //if (led_code == "84")
            //{
            //    //check if the amount is greather than 20000
            //    if (t.amount > 20000)
            //    {
            //        trx.ResponseCode = "13";
            //        Connect c1 = new Connect("spd_WSupdatetrans");
            //        c1.addparam("@sessionid", trx.SessionID);
            //        c1.addparam("@bra_code", bra_code);
            //        c1.addparam("@cus_num", cus_num);
            //        c1.addparam("@cur_code", cur_code);
            //        c1.addparam("@led_code", led_code);
            //        c1.addparam("@sub_acct_code", sub_acct_code);
            //        c1.addparam("@amt", t.amount);
            //        c1.addparam("@payRef", trx.PaymentReference);
            //        c1.addparam("@manRef", "");
            //        c1.addparam("@remark", trx.Narration);
            //        c1.addparam("@originSender", trx.OriginatorName);
            //        c1.addparam("@Responsecode", trx.ResponseCode);
            //        c1.addparam("@accname", trx.AccountName);
            //        c1.addparam("@feecharge", 0);
            //        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
            //        c1.query();
            //        DateTime endTime = DateTime.Now;
            //        TimeSpan span = endTime.Subtract(startTime);
            //        val = span.Seconds;
            //        if (val > 20)
            //        {
            //            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
            //        }
            //        return trx.createResponse();
            //    }
            //    else if (t.amount + custBal > 200000)//check if the amount is greater
            //    {
            //        trx.ResponseCode = "13";
            //        Connect c1 = new Connect("spd_WSupdatetrans");
            //        c1.addparam("@sessionid", trx.SessionID);
            //        c1.addparam("@bra_code", bra_code);
            //        c1.addparam("@cus_num", cus_num);
            //        c1.addparam("@cur_code", cur_code);
            //        c1.addparam("@led_code", led_code);
            //        c1.addparam("@sub_acct_code", sub_acct_code);
            //        c1.addparam("@amt", t.amount);
            //        c1.addparam("@payRef", trx.PaymentReference);
            //        c1.addparam("@manRef", "");
            //        c1.addparam("@remark", trx.Narration);
            //        c1.addparam("@originSender", trx.OriginatorName);
            //        c1.addparam("@Responsecode", trx.ResponseCode);
            //        c1.addparam("@accname", trx.AccountName);
            //        c1.addparam("@feecharge", 0);
            //        c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
            //        c1.query();
            //        DateTime endTime = DateTime.Now;
            //        TimeSpan span = endTime.Subtract(startTime);
            //        val = span.Seconds;
            //        if (val > 20)
            //        {
            //            new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
            //        }
            //        return trx.createResponse();
            //    }
            //}
            //check if the ledger is 84 if it is then check the amount
            sbp.banks kia = new sbp.banks();
            cust_type = kia.getKiaKiaClass(bra_code, cus_num, cur_code, led_code, sub_acct_code);
            if (led_code == "84" && cust_type == 1) //tier 1
            {
                //check if the amount is greather than 20000
                if (t.amount > 20000)
                {
                    trx.ResponseCode = "13";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
                else if (t.amount + custBal > 200000)//check if the amount is greater
                {
                    trx.ResponseCode = "13";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
            }
            else if (led_code == "84" && cust_type == 2) //tier 2
            {
                //check if the amount is greather than 20000
                if (t.amount > 50000)
                {
                    trx.ResponseCode = "13";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
                else if (t.amount + custBal > 400000)//check if the amount is greater
                {
                    trx.ResponseCode = "13";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
            }
            //check if the ledger is 5068 if it is then check the amount
            if (led_code == "5068")
            {
                //check if the amount is greather than 20000
                if (t.amount > 20000)
                {
                    trx.ResponseCode = "13";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
                else if (t.amount + custBal > 200000)//check if the amount is greater
                {
                    trx.ResponseCode = "13";
                    Connect c1 = new Connect("spd_WSupdatetrans");
                    c1.addparam("@sessionid", trx.SessionID);
                    c1.addparam("@bra_code", bra_code);
                    c1.addparam("@cus_num", cus_num);
                    c1.addparam("@cur_code", cur_code);
                    c1.addparam("@led_code", led_code);
                    c1.addparam("@sub_acct_code", sub_acct_code);
                    c1.addparam("@amt", t.amount);
                    c1.addparam("@payRef", trx.PaymentReference);
                    c1.addparam("@manRef", "");
                    c1.addparam("@remark", trx.Narration);
                    c1.addparam("@originSender", trx.OriginatorName);
                    c1.addparam("@Responsecode", trx.ResponseCode);
                    c1.addparam("@accname", trx.AccountName);
                    c1.addparam("@feecharge", 0);
                    c1.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
                    c1.query();
                    DateTime endTime = DateTime.Now;
                    TimeSpan span = endTime.Subtract(startTime);
                    val = span.Seconds;
                    if (val > 20)
                    {
                        new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                    }
                    return trx.createResponse();
                }
            }

            //acs.authorizeTrnxToSterling(t);

            //if (acs.Respreturnedcode1 == "0")
            //{

            trx.Amount = acs.RespCreditedamt;// g.TRUmoneyToISOmoney(Convert.ToDecimal(acs.RespCreditedamt));

            //log trnx
            Connect c11 = new Connect("spd_WSupdatetrans");
            c11.addparam("@sessionid", trx.SessionID);
            c11.addparam("@bra_code", bra_code);
            c11.addparam("@cus_num", cus_num);
            c11.addparam("@cur_code", cur_code);
            c11.addparam("@led_code", led_code);
            c11.addparam("@sub_acct_code", sub_acct_code);
            c11.addparam("@amt", t.amount);
            c11.addparam("@payRef", trx.PaymentReference);
            c11.addparam("@manRef", "");
            c11.addparam("@remark", trx.Narration);
            c11.addparam("@originSender", trx.OriginatorName);
            c11.addparam("@Responsecode", trx.ResponseCode);
            c11.addparam("@accname", trx.AccountName);
            c11.addparam("@feecharge", 0);
            c11.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));

            int fin = c11.query();

            if (fin > 0)
            {
                trx.ResponseCode = "00";
            }
            else
            {
                DateTime endTime = DateTime.Now;
                TimeSpan span = endTime.Subtract(startTime);
                val = span.Seconds;
                if (val > 20)
                {
                    new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
                }
                new ErrorLog("Error Occured Updating transaction for processing " + trx.SessionID);
                trx.ResponseCode = "05";
                return trx.createResponse();
            }
            //}
            //else
            //{
            //    trx.ResponseCode = "21";
            //    Connect c = new Connect("spd_WSupdatetrans");
            //    c.addparam("@sessionid", trx.SessionID);
            //    c.addparam("@bra_code", bra_code);
            //    c.addparam("@cus_num", cus_num);
            //    c.addparam("@cur_code", cur_code);
            //    c.addparam("@led_code", led_code);
            //    c.addparam("@sub_acct_code", sub_acct_code);
            //    c.addparam("@amt", t.amount);
            //    c.addparam("@payRef", trx.PaymentReference);
            //    c.addparam("@manRef", "");
            //    c.addparam("@remark", trx.Narration);
            //    c.addparam("@originSender", trx.OriginatorName);
            //    c.addparam("@Responsecode", trx.ResponseCode);
            //    c.addparam("@accname", trx.AccountName);
            //    c.addparam("@feecharge", 0);
            //    c.addparam("@ResponseMsg", g.responseCodes(trx.ResponseCode));
            //    c.query();
            //}

            if (check == 1)
            {
                trx.AccountNumber = actualAcctNum;
            }
            //if transaction was successful then check if advice came in before the transaction was concluded
            //if (trx.ResponseCode == "00")
            //{
            //    //check if the FTAdvice was checked
            //    new ErrorLog("check if the FTAdvice was checked for SessionID  " + trx.SessionID);
            //    //check if the sessionID was marked for FTAdvice before the transaction completed
            //    string sql = "";
            //    sql = "select * from tbl_WStrans where FTadvice = 1 and sessionid=@sid";
            //    Connect c = new Connect(sql, true);
            //    c.addparam("@sid", trx.SessionID);
            //    DataSet ds3 = c.query("rec");
            //    if (ds3.Tables[0].Rows.Count > 0)
            //    {
            //        //If it gets here means FTAdvice actually came in for this transaction b4 transaction was concluded
            //        //insert this request into the reversal table
            //        //cehck banks to see if the transacion was there
            //        sbp.banks b = new sbp.banks();
            //        DataSet ds1 = new DataSet();
            //        ds1 = b.getPaymentDetails(trx.SessionID, bra_code, cus_num, cur_code, led_code, sub_acct_code, decimal.Parse(trx.Amount));
            //        if (ds1.Tables[0].Rows.Count > 0)
            //        {
            //            //if the records were found on BANKS then proceed to log it into the reversal table
            //            string refidval = getRefid(trx.SessionID);
            //            try
            //            {
            //                int cnval = 0;
            //                Connect cn1 = new Connect("spd_mobileTrnxReverse1");
            //                cn1.addparam("@refid", Convert.ToInt32(refidval));
            //                cn1.addparam("@doneby", "AUTOSYSTEM");
            //                cn1.addparam("@action", "correct");
            //                cnval = cn1.query();
            //                if (cnval > 0)
            //                {
            //                    new ErrorLog("Reversal set for this Transaction after processing took long to complete:" + trx.SessionID);
            //                }
            //                else
            //                {

            //                }
            //            }
            //            catch (Exception ex)
            //            {
            //                new ErrorLog("NIBSS Advice for " + trx.SessionID + " " + ex);
            //            }
            //        }
            //    }
            //}

            trx.Amount = t.amount.ToString();
            DateTime endTime2 = DateTime.Now;
            TimeSpan span2 = endTime2.Subtract(startTime);
            val = span2.Seconds;
            if (val > 20)
            {
                new Errorlog20Secs(" SessionID " + trx.SessionID + " was above 20 secs ");
            }
            return trx.createResponse();
        }
        else if (sbpVal == 2)
        {
            string rsp = ""; string rsp1 = ""; string stacode = "";
            //imal transactions
            imal.NIBankingClientService im = new imal.NIBankingClientService();
            //check for duplicate
            Connect cx = new Connect("spd_CheckDuplicateSessionid2");
            cx.addparam("@sessionid", trx.SessionID);
            int donx = cx.query();
            if (donx == 0)
            {
                trx.ResponseCode = "26";
                new ErrorLog("DUPLICATE TRNX");
                new ErrorLog(trx.xml);
                return trx.createResponse();
            }

            //go to IMAL and get the customers account details
            trx.AccountNumber = m.Encrypt(trx.AccountNumber, "1239879000");
            rsp1 = im.getAccountDetails(trx.AccountNumber.Trim(), "xx");
            rsp1 = m.Decrypt(rsp1, "1239879000");
            Gadget gg = new Gadget();
            string[] bits1 = rsp1.Split(':');
            //DataRow dr = ds.Tables[0].Rows[0];
            string cusNam = trx.AccountName;
            if (cusNam.ToUpper() == trx.AccountName.ToUpper())
            {
                trx.AccountName = bits1[1];
                bra_code = bits1[2];
                cus_num = bits1[3];
                cur_code = bits1[4];
                led_code = bits1[5];
                sub_acct_code = bits1[6];
                string stacode1 = bits1[7];

                Connect c = new Connect("spd_WSInserttrans");
                c.addparam("@sessionid", trx.SessionID);
                c.addparam("@bra_code", bra_code);
                c.addparam("@cus_num", cus_num);
                c.addparam("@cur_code", cur_code);
                c.addparam("@led_code", led_code);
                c.addparam("@sub_acct_code", sub_acct_code);
                c.addparam("@Transnature", 0);
                c.addparam("@batchNum", "");
                c.addparam("@originBankCode", trx.DestinationBankCode);
                c.addparam("@channelCode", trx.ChannelCode);
                c.addparam("@status", 0);
                c.addparam("@transtype", "Fund Transfer Request:Direct Credit-Single Item");
                c.addparam("@amt", decimal.Parse(trx.Amount));
                c.query();

                //update the transaction type against the sessionid
                updateInwardType(trx.SessionID, 2);

                if (stacode1 == "A" || stacode1 == "I")
                {
                    //proceed
                }
                else
                {
                    trx.ResponseCode = "57";
                    return trx.createResponse();
                }

                if (cur_code != "566")
                {
                    trx.ResponseCode = "57";
                    return trx.createResponse();
                }

            }
            else
            {

                trx.AccountName = "Name Mismatch";
                trx.ResponseCode = "08";


                Connect c1 = new Connect("spd_WSupdatetrans");
                c1.addparam("@sessionid", trx.SessionID);
                c1.addparam("@bra_code", bra_code);
                c1.addparam("@cus_num", cus_num);
                c1.addparam("@cur_code", cur_code);
                c1.addparam("@led_code", led_code);
                c1.addparam("@sub_acct_code", sub_acct_code);
                c1.addparam("@amt", decimal.Parse(trx.Amount));
                c1.addparam("@payRef", trx.PaymentReference);
                c1.addparam("@manRef", "");
                c1.addparam("@remark", trx.Narration);
                c1.addparam("@originSender", trx.OriginatorName);
                c1.addparam("@Responsecode", trx.ResponseCode);
                c1.addparam("@accname", trx.AccountName);
                c1.addparam("@feecharge", 0);
                c1.addparam("@ResponseMsg", gg.responseCodes(trx.ResponseCode));
                c1.query();
                return trx.createResponse();
            }
            trx.SessionID = m.Encrypt(trx.SessionID, "1239879000");
            trx.OriginatorName = m.Encrypt(trx.OriginatorName, "1239879000");
            //trx.AccountNumber = m.Encrypt(trx.AccountNumber, "1239879000");
            trx.Amount = m.Encrypt(trx.Amount, "1239879000");
            trx.PaymentReference = m.Encrypt(trx.PaymentReference, "1239879000");
            trx.Narration = m.Encrypt(trx.Narration, "1239879000");

            rsp = im.ftSingleCreditRequest(trx.SessionID, trx.OriginatorName, trx.AccountNumber, trx.Amount, trx.PaymentReference, trx.Narration, "XXX");
            rsp = m.Decrypt(rsp, "1239879000");
            new ErrorLog("Response gotten for IMAL FundTransfer for account " + trx.SessionID + " " + trx.AccountNumber + " is " + rsp);
            string[] bits = rsp.Split(':');
            
            trx.SessionID = m.Decrypt(trx.SessionID, "1239879000");
            trx.OriginatorName = m.Decrypt(trx.OriginatorName, "1239879000");
            trx.AccountNumber = m.Decrypt(trx.AccountNumber, "1239879000");
            trx.Amount = m.Decrypt(trx.Amount, "1239879000");
            trx.PaymentReference = m.Decrypt(trx.PaymentReference, "1239879000");
            trx.Narration = m.Decrypt(trx.Narration, "1239879000");

            updateImalTransbySID(bits[0], bits[1]);
            //trx.AccountName = bits[0];
            try
            {
                trx.ResponseCode = bits[1];
                new ErrorLog("IMAL SessionID to be updated " + trx.SessionID);
                Connect c11 = new Connect("spd_WSupdatetrans");
                c11.addparam("@sessionid", trx.SessionID);
                c11.addparam("@bra_code", bra_code);
                c11.addparam("@cus_num", cus_num);
                c11.addparam("@cur_code", cur_code);
                c11.addparam("@led_code", led_code);
                c11.addparam("@sub_acct_code", sub_acct_code);
                c11.addparam("@amt", decimal.Parse(trx.Amount));
                c11.addparam("@payRef", trx.PaymentReference);
                c11.addparam("@manRef", "");
                c11.addparam("@remark", trx.Narration);
                c11.addparam("@originSender", trx.OriginatorName);
                c11.addparam("@Responsecode", trx.ResponseCode);
                c11.addparam("@accname", trx.AccountName);
                c11.addparam("@feecharge", 0);
                c11.addparam("@ResponseMsg", gg.responseCodes(trx.ResponseCode));
                c11.query();
            }
            catch (Exception ex)
            {
                new ErrorLog("Error Occured while updating IMAL final respons " + ex);
            }
            return trx.createResponse();
        }
        return "";
        //}
    }
    public void updateImalTransbySID(string sid, string rsp)
    {
        Gadget g = new Gadget();
        string sql = "";
        sql = "update tbl_wstrans set Responsecode=@rsp, ResponseMsg=@rmg, Approvevalue=1 where sessionid=@sid";
        Connect c = new Connect(sql, true);
        c.addparam("@sid", sid);
        c.addparam("@rsp", rsp);
        c.addparam("@rmg", g.responseCodes(rsp));
        c.query();
    }
    [WebMethod]
    public string fundstransferAdviceRequest_dc(string request)
    {
        sbp.banks b = new sbp.banks();
        int cn = 0;
        DataSet ds = new DataSet();
        TR_FundsTransferAdviceRqtDC trx = new TR_FundsTransferAdviceRqtDC();
        trx.xml = request;
        new ErrorLog("New Advice " + request);
        string bra_code = "";
        string cus_num = "";
        string cur_code = "";
        string led_code = "";
        string sub_acct_code = "";
         SBPSwitch sbp = new SBPSwitch();
        int sbpVal = sbp.getInternalBankID(trx.AccountNumber);
        if (sbpVal == 1)
        {
            if (!trx.readRequest())
            {
                trx.ResponseCode = "30";
                return trx.createResponse();
            }

            //Check the account if it is nuban 
            string actualAcctNum = "";
            NubanServices nu = new NubanServices();
            if (trx.AccountNumber.Length == 10)
            {
                actualaccount = trx.AccountNumber;
                trx.AccountNumber = nu.NubanNumber(trx.AccountNumber);
            }

            try
            {

                ds = b.getBalanceDetails(trx.AccountNumber);
            }
            catch (Exception ex)
            {
                ErrorLog err = new ErrorLog(ex);
                new ErrorLog("Error Occured for customer with sessionid " + trx.SessionID);
            }

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataRow dr = ds.Tables[0].Rows[0];

                trx.AccountName = dr["cus_sho_name"].ToString();
                bra_code = dr["bra_code"].ToString();
                cus_num = dr["cus_num"].ToString();
                cur_code = dr["cur_code"].ToString();
                led_code = dr["led_code"].ToString();
                sub_acct_code = dr["sub_acct_code"].ToString();

                //check for allowed ledger
                if (cur_code != "1")
                {
                    trx.ResponseCode = "57";
                    return trx.createResponse();
                }

                //check if sessionid exist
                bool chkSessioid = SessionIdExist(trx.SessionID);
                if (!chkSessioid)
                {
                    trx.ResponseCode = "15";
                    return trx.createResponse();
                }

                string refidval = getRefid(trx.SessionID);
                //mark this transaction for Funds transfer Advice Response.
                Connect c = new Connect("spd_FundsTrnsAdviceDC");
                c.addparam("@sessionid", trx.SessionID);
                cn = c.query();
                if (cn == 1)
                {
                    DataSet ds1 = new DataSet();
                    new ErrorLog("Sessionid for Advice " + trx.SessionID + " has been marked for Advice");
                    //confirm on BANKS if customer got the credit

                    try
                    {
                        ds1 = b.getPaymentDetails(trx.SessionID, bra_code, cus_num, cur_code, led_code, sub_acct_code, decimal.Parse(trx.Amount));
                    }
                    catch (Exception ex)
                    {
                        new ErrorLog("Error Occured: " + ex + " " + trx.SessionID);
                        trx.ResponseCode = "25";
                        return trx.createResponse();
                    }
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                        {

                            DataRow dr1 = ds1.Tables[0].Rows[i];
                            string[] bits = dr1["remarks"].ToString().Split(':');
                            string bb = bits[1].Trim();
                            bb = bb.Replace("Credit", "");
                            bb = bb.Replace(" PAYREF", "");
                            //[1] = "Credit082232120619110650879992107120 PAYREF"
                            if (bb.Trim() == trx.SessionID)
                            {
                                //reverse the money
                                //send response back to NIBSS
                                try
                                {
                                    int cnval = 0;
                                    Connect cn1 = new Connect("spd_mobileTrnxReverse1");
                                    cn1.addparam("@refid", Convert.ToInt32(refidval));
                                    cn1.addparam("@doneby", "AUTOSYSTEM");
                                    cn1.addparam("@action", "correct");
                                    cnval = cn1.query();
                                    if (cnval > 0)
                                    {
                                        trx.ResponseCode = "00";
                                        new ErrorLog("reverse for:" + trx.SessionID);
                                    }
                                    else
                                    {
                                        trx.ResponseCode = "21";
                                    }
                                }
                                catch (Exception ex)
                                {
                                    new ErrorLog("NIBSS Advice " + ex);
                                }
                            }
                            else
                            {
                                trx.ResponseCode = "25";
                            }
                        }
                    }
                    else
                    {
                        //customers account was not credited
                        //do not reverse
                        trx.ResponseCode = "21";
                        new ErrorLog("Customers account was not credited [NIBSS Advice] " + trx.SessionID);
                        return trx.createResponse();
                    }

                }
                else
                {
                    trx.ResponseCode = "25";
                    new ErrorLog("Unable to Update Record for Reversal Advice for : " + trx.SessionID);
                }
            }
            else
            {
                trx.ResponseCode = "07";
                return trx.createResponse();
            }
        }
        else if (sbpVal == 2)
        {
            string rsp = "";
            trx.SessionID = m.Encrypt(trx.SessionID, "1239879000");
            trx.AccountNumber = m.Encrypt(trx.AccountNumber, "1239879000");
            trx.Amount = m.Encrypt(trx.Amount, "1239879000");


            imal.NIBankingClientService im = new imal.NIBankingClientService();
            rsp = im.reverse(trx.SessionID, trx.AccountNumber, trx.Amount, "xx");
            rsp = m.Decrypt(rsp, "1239879000");
            string[] bits = rsp.Split(':');
            trx.ResponseCode = bits[1];

            trx.SessionID = m.Decrypt(trx.SessionID, "1239879000");
            trx.AccountNumber = m.Decrypt(trx.AccountNumber, "1239879000");
            trx.Amount = m.Decrypt(trx.Amount, "1239879000");

            return trx.createResponse();
        }
        return trx.createResponse();
    }

    public string getRefid(string sessionid)
    {
        string Refid = "";
        Connect c = new Connect("spd_getRefidBySessionid");
        c.addparam("@sessionid", sessionid);
        DataSet ds = c.query("rec");
        if (ds.Tables[0].Rows.Count > 0)
        {
            DataRow dr = ds.Tables[0].Rows[0];
            Refid = dr["Refid"].ToString();
        }
        return Refid;
    }

    public bool SessionIdExist(string sessionid)
    {
        bool found = false;
        try
        {
            Connect c = new Connect("spd_SessionidExist");
            c.addparam("@sessionid", sessionid);
            DataSet ds = c.query("rec");
            if (ds.Tables[0].Rows.Count > 0)
            {
                found = true;
            }
            else
            {
                found = false;
            }
        }
        catch (Exception ex)
        {
            new ErrorLog(ex);
            found = false;
        }
        return found;
    }

    //[WebMethod]
    //public string nameenquirybulkitemnotification(string request)
    //{
    //    //when called 
    //    //read request
    //    TransactionService tsv = new TransactionService();
    //    TR_BulkNameEnquiryNotification tr = new TR_BulkNameEnquiryNotification();
    //    tr.xml = request;

    //    if (!tr.readRequest())
    //    {
    //        return "could not read request";
    //    }
    //    //check if batch exists
    //    if (tsv.checkBatch(tr.BatchNumber).ToString() != tr.NumberOfRecords)
    //    {
    //        return "invalid batch number";
    //    }

    //    //loop thru the records and 
    //    //update transactions in database from status 1 to 2
    //    for (int i = 0; i < tr.Record.Length; i++)
    //    {
    //        if (tr.Record[i].ResponseCode == "00")
    //        {
    //            tsv.updateTrnxStatus(tr.Record[i].RecID, 2, tr.Record[i].AccountName);
    //        }
    //    }
    //    //notify HOP and CSO of branch
    //    //Mailer m = new Mailer();

    //    new ErrorLog("mailing batch.... " + tr.BatchNumber);


    //    // build and send response 

    //    return tr.createResponse();
    //}

    //[WebMethod]
    //public string fundtransferbulkitemnotificationDC(string request)
    //{
    //    //fund transfer DC has returned
    //    //update the database 
    //    //send response

    //    //request = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><FTBulkCreditNotificationRequest><Header><DestinationBankCode>058</DestinationBankCode><ChannelCode>1</ChannelCode><BatchNumber>232058110117420150537663</BatchNumber><NumberOfRecords>2</NumberOfRecords></Header><Record><RecID>232058110117134256007170606020</RecID><AccountNumber>1111111111</AccountNumber><AccountName>Jack Smith</AccountName><OriginatorName>OKESOLA ADEDAYO OPEOLUWA</OriginatorName><Narration>Pension Jan 2011</Narration><PaymentReference>1000000246</PaymentReference><Amount>000000123456</Amount><ResponseCode>00</ResponseCode></Record><Record><RecID>232058110117134256321372413884</RecID><AccountNumber>1212121212</AccountNumber><AccountName>Oliver Kahn</AccountName><OriginatorName>OKESOLA ADEDAYO OPEOLUWA</OriginatorName><Narration>Pension Jan 2011</Narration><PaymentReference>1000000247</PaymentReference><Amount>000000230005</Amount><ResponseCode>00</ResponseCode></Record></FTBulkCreditNotificationRequest>";
    //    TransactionService tsv = new TransactionService();
    //    TR_BulkFundTransferNotificationDC tr = new TR_BulkFundTransferNotificationDC();
    //    tr.xml = request;

    //    if (!tr.readRequest())
    //    {
    //        return "could not read request";
    //    }
    //    //check if batch exists
    //    if (tsv.checkBatch(tr.BatchNumber).ToString() != tr.NumberOfRecords)
    //    {
    //        return "invalid batch number";
    //    }

    //    //loop thru the records and 
    //    //update transactions in database from status 1 to 2
    //    for (int i = 0; i < tr.Record.Length; i++)
    //    {
    //        if (tr.Record[i].ResponseCode == "00")
    //        {
    //            tsv.updateTrnxStatus(tr.Record[i].RecID, 4);
    //            tsv.updateTrnxApproveStatus(tr.Record[i].RecID, 1);
    //        }
    //        else
    //        {
    //            tsv.updateTrnxStatus(tr.Record[i].RecID, 32);
    //        }
    //    }
    //    //notify HOP and CSO of branch
    //    //Mailer m = new Mailer();

    //    new ErrorLog("mailing batch.... " + tr.BatchNumber);


    //    // build and send response 

    //    tr.DestinationBankCode = tr.BatchNumber.Substring(3, 3);
    //    return tr.createResponse();
    //}

    [WebMethod]
    public string txnstatusquerysingleitem(string request)
    {
       
        TransactionService tsv = new TransactionService();
        string rsp = "";
        trx.xml = request;
        if (!trx.readRequest())
        {
            trx.ResponseCode = "30";
            return trx.createResponse();
        }
        //search by transid
        DataSet ds = tsv.getTrnxBySesionId(trx.SessionID);
        if (ds.Tables[0].Rows.Count < 1)
        {
            trx.ResponseCode = "12";//invalid transaction
            return trx.createResponse();
        }
        if (ds.Tables[0].Rows.Count > 0 ) //single transaction
        {
            DataRow dr = ds.Tables[0].Rows[0];
            rsp = dr["Responsecode"].ToString();
            TR_SingleStatusQuery ssq = new TR_SingleStatusQuery();
            ssq.SessionID = trx.SessionID;
            ssq.DestinationBankCode = trx.DestinationBankCode;
            ssq.ResponseCode = rsp;
            return ssq.createResponse();
        }
        return "";
    }
    protected string runSingleJob()
    {
        DataSet ds = new DataSet();
        TR_SingleStatusQuery ssq = new TR_SingleStatusQuery();
        TransactionService tsv = new TransactionService();

        ssq.SessionID = trx.SessionID ;
        ssq.DestinationBankCode = trx.DestinationBankCode;
        ssq.ChannelCode = trx.ChannelCode;
        ssq.ResponseCode = "00";
        return ssq.createResponse();
    }
}

