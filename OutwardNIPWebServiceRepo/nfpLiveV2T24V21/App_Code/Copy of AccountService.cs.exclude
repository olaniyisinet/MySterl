using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Oracle.DataAccess.Client;
using System.Text;

public class AccountService
{

    public string Fee_expl_code = "937";
    public string TSS_bra_code = "";
    public string TSS_cus_num = "";
    public string TSS_cur_code = "";
    public string TSS_led_code = "";
    public string TSS_sub_acct_code = "";

    public string FEE_bra_code = "";
    public string FEE_cus_num = "";
    public string FEE_cur_code = "";
    public string FEE_led_code = "";
    public string FEE_sub_acct_code = "";

    TransactionService ts = new TransactionService();

    public decimal fees_amt = 0;
    public decimal fees_amt2 = 0;
    public decimal fees_amt3 = 0;

    public bool checkConsession(Account a)
    {
        return checkConsession(a.bra_code, a.cus_num, a.cur_code, a.led_code, a.sub_acct_code);
    }

    public bool checkConsession(string bra_code, string cus_num, string cur_code, string led_code, string sub_code)
    {
        bool ok = false;

        Connect c = new Connect("spd_GetConcession");
        c.addparam("@b_code", bra_code);
        c.addparam("@c_num", cus_num);
        c.addparam("@c_code", cur_code);
        c.addparam("@l_code", led_code);
        c.addparam("@s_code", sub_code);
        DataSet ds = c.query("rec");

        if (ds.Tables[0].Rows.Count > 0)
        {
            DataRow dr = ds.Tables[0].Rows[0];
            if (Convert.ToInt16(dr["STATUSFLAG"]) == 1)
            {
                fees_amt = Convert.ToDecimal(dr["CONCESSION_AMT"]);
                fees_amt2 = Convert.ToDecimal(dr["CONCESSION_AMT2"]);
                fees_amt3 = Convert.ToDecimal(dr["CONCESSION_AMT3"]);
                ok = true;
            }
        }
        return ok;
    }

    public bool tssACCok;
    public bool feeACCok;
    public bool checkTSSOnly()
    {
        DataSet dsTss = ts.getCurrentTss();
        //assign the Tss account to the varriables
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();

            tssACCok = checkAccStatus("223", TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code);
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool checkTSSandFeesAccount(string ledger,string bra_code)
    {   
        sbp.banks bank = new sbp.banks();
        DataSet ds = bank.checkOpLedger(ledger, "0");//test if income ledger exist and if it is active
        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        //assign the Tss account to the varriables
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        else
        {
            return false;
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }
        else
        {
            return false;
        }


        if (ds.Tables[0].Rows.Count > 0)
        {
            tssACCok = checkAccStatus(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code);//we need to get the nfp clearing code
            feeACCok = checkAccStatus(bra_code, FEE_cus_num, FEE_cur_code, FEE_led_code, FEE_sub_acct_code);//we neeed to get nibbs income account test            
            return true;
        }
        else
        {
            return false;
        }
    }

    public bool checkAccStatus(string bra_code, string cus_num, string cur_code, string led_code, string sub_code)
    {
        sbp.banks bank = new sbp.banks();
        return bank.checkCusAccount(bra_code, cus_num, cur_code, led_code, sub_code);    
    }

    public decimal NIPfee;
    public decimal NIPvat;
    public bool getNIPFee(decimal amountToPay)
    {
        //get the fees from database and assign to variables 
        DataSet ds = ts.getNIPFee(amountToPay);
        if (ds.Tables[0].Rows.Count > 0)
        {
            DataRow dr = ds.Tables[0].Rows[0];
            NIPfee = decimal.Parse(dr["feeAmount"].ToString());
            NIPvat = decimal.Parse(dr["vat"].ToString());
            return true;
        }
        else
        {
            return false;
        }
    }

    public decimal calculateFee(decimal amountToPay)
    {
        //get the fees from database and assign to variables 
        DataSet ds = ts.getTransFee();
        if (ds.Tables[0].Rows.Count > 0)
        {
            DataRow dr = ds.Tables[0].Rows[0];
            fees_amt = decimal.Parse(dr["amt1"].ToString());
            fees_amt2 = decimal.Parse(dr["amt2"].ToString());
            fees_amt3 = decimal.Parse(dr["amt3"].ToString());
        }
        else
        {
        }

        decimal feecharge;
        if (amountToPay > 0 && amountToPay < (decimal)1000000)
        {
            feecharge = fees_amt; //for transactions less 1 million
        }
        else if (amountToPay < (decimal)10000000)
        {
            feecharge = fees_amt2; //for transactions less  10 million
        }
        else
        {
            feecharge = fees_amt3; //for transactions 10 Million and above
        }
        return feecharge;
    }

    public decimal thelimitval;
    public bool checkTellerLimit(string bra_code, string Tellerid, decimal totalamttopay)
    {
        sbp.banks bank = new sbp.banks();
        DataSet ds = bank.getTellerLimit(Tellerid, bra_code);
        bool ok = false;       
        if (ds.Tables[0].Rows.Count > 0)
        {
            thelimitval = Convert.ToDecimal(ds.Tables[0].Rows[0]["aut_amt"]); 
            if (thelimitval >= totalamttopay)
            {                 
                ok = true;
            }
        }
        return ok;
    }

    public string RespCreditedamt;
    public string Respreturnedcode1;
    public string Respreturnedcode2;
    public string ResponseMsg;
    public void authorizeTrnxFromSterling(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";

        string expl_code = "";
        Gadget g = new Gadget();

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }

        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        //assign the Tss account to the varriables
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }
        string xrem = t.origin_branch + "/" + t.inCust.cus_sho_name + "/" + 
            t.destinationcode + "/" + t.outCust.cusname + "/" + t.sessionid;
        

        xrem = xrem.Replace("&amp;", "&");
        xrem = xrem.Replace("&apos;", "'");
        xrem = xrem.Replace("&quot;", "\"");

        xrem = xrem.Replace("& ", "&amp;");
        xrem = xrem.Replace("'", "&apos;");
        xrem = xrem.Replace("\"", "&quot;");



        string xremark1 = "NIP/" + xrem;
        string xremark2 = "NIPFEE/" + xrem;
        string xremark3 = "NIPVAT/" + xrem;

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.vat.ToString(), Fee_expl_code, xremark3);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.addAccount(t.VAT_bra_code, t.VAT_cus_num, t.VAT_cur_code, t.VAT_led_code, t.VAT_sub_acct_code, t.vat.ToString(), Fee_expl_code, xremark3);
        xg.endCredit();

        xg.closeXML();

        //uncomment this part letter
        try
        {
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer from Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returened values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
            string error_text = xg.debits[0]["err_text"].InnerText;

            StringBuilder resp = new StringBuilder();
            resp.Append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
            resp.Append("<intTrnxResp>");
            resp.Append("<totaldebit>" + xg.credits[0]["amount"].InnerText + "</totaldebit>");
            resp.Append("<remark>" + xremark1 + "</remark>");
            resp.Append("<principal>");
            resp.Append("<acc_num>");
            resp.Append(t.inCust.bra_code + TSS_cus_num + TSS_cur_code + TSS_led_code + TSS_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[0]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[0]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[0]["err_text"].InnerText + "</responseText>");
            resp.Append("</principal>");
            resp.Append("<fee>");
            resp.Append("<acc_num>");
            resp.Append(t.inCust.bra_code + FEE_cus_num + FEE_cur_code + FEE_led_code + FEE_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[1]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[1]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[1]["err_text"].InnerText + "</responseText>");
            resp.Append("</fee>");
            resp.Append("<vat>");
            resp.Append("<acc_num>");
            resp.Append(t.VAT_bra_code + t.VAT_cus_num + t.VAT_cur_code + t.VAT_led_code + t.VAT_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[2]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[2]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[2]["err_text"].InnerText + "</responseText>");
            resp.Append("</vat>");
            resp.Append("</intTrnxResp>");
            ResponseMsg = resp.ToString();

        }
        catch (Exception ex)
        {
            new ErrorLog("Unable to debit customer account " + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " for amount " + t.amount.ToString() + " and fee charge " + t.feecharge.ToString() + ex);
            Respreturnedcode1 = "1x";
        }
    }

    //Bank Teller
    public void authorizeBankTellerTrnxFromSterling(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";

        string expl_code = "";
        Gadget g = new Gadget();
        

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }


        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        //assign the Tss account to the varriables
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }

        string xrem  = t.origin_branch + "/" + t.inCust.cus_sho_name + "/" + 
            t.destinationcode + "/" + t.outCust.cusname + "/" + t.sessionid + 
            " TellerID " + t.tellerID + "/" + t.paymentRef ;

        
        if (xrem.Length > 180)
        {
            xrem = xrem.Substring(0, 180); //banks colum takes 200 max
        }

        xrem = xrem.Replace("&amp;", "&");
        xrem = xrem.Replace("&apos;", "'");
        xrem = xrem.Replace("&quot;", "\"");

        xrem = xrem.Replace("& ", "&amp;");
        xrem = xrem.Replace("'", "&apos;");
        xrem = xrem.Replace("\"", "&quot;");



        string xremark1 = "NIP/" + g.RemoveSpecialChars(xrem);
        string xremark2 = "NIPFEE/" + g.RemoveSpecialChars(xrem);
        string xremark3 = "NIPVAT/" + g.RemoveSpecialChars(xrem);

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.vat.ToString(), Fee_expl_code, xremark3);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.addAccount(t.VAT_bra_code, t.VAT_cus_num, t.VAT_cur_code, t.VAT_led_code, t.VAT_sub_acct_code, t.vat.ToString(), Fee_expl_code, xremark3);
        xg.endCredit();

        xg.closeXML();

        try
        {
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer from Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returened values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
            string error_text = xg.debits[0]["err_text"].InnerText;

            StringBuilder resp = new StringBuilder();
            resp.Append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
            resp.Append("<intTrnxResp>");
            resp.Append("<totaldebit>" + xg.credits[0]["amount"].InnerText + "</totaldebit>");
            resp.Append("<remark>" + xremark1 + "</remark>");
            resp.Append("<principal>");
            resp.Append("<acc_num>");
            resp.Append(t.inCust.bra_code + TSS_cus_num + TSS_cur_code + TSS_led_code + TSS_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[0]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[0]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[0]["err_text"].InnerText + "</responseText>");
            resp.Append("</principal>");
            resp.Append("<fee>");
            resp.Append("<acc_num>");
            resp.Append(t.inCust.bra_code + FEE_cus_num + FEE_cur_code + FEE_led_code + FEE_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[1]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[1]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[1]["err_text"].InnerText + "</responseText>");
            resp.Append("</fee>");
            resp.Append("</intTrnxResp>");
            ResponseMsg = resp.ToString();

        }
        catch (Exception ex)
        {
            new ErrorLog("Unable to debit customer account " + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " for amount " + t.amount.ToString() + " and fee charge " + t.feecharge.ToString() + ex);
            Respreturnedcode1 = "1x";
        }
    }

    //ibs
    public void authorizeIBSTrnxFromSterling(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";

        string expl_code = "";
        Gadget g = new Gadget();

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }


        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        //assign the Tss account to the varriables
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }

        string xrem = t.origin_branch + "/" + t.inCust.cus_sho_name + "/" + 
            t.destinationcode + "/" + t.outCust.cusname + "/" + t.sessionid;
        

        xrem = xrem.Replace("&amp;", "&");
        xrem = xrem.Replace("&apos;", "'");
        xrem = xrem.Replace("&quot;", "\"");

        xrem = xrem.Replace("& ", "&amp;");
        xrem = xrem.Replace("'", "&apos;");
        xrem = xrem.Replace("\"", "&quot;");


        string xremark1 = "NIP/" + xrem;
        string xremark2 = "NIPFEE/" + xrem;
        string xremark3 = "NIPVAT/" + xrem;

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.vat.ToString(), Fee_expl_code, xremark3);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.addAccount(t.VAT_bra_code, t.VAT_cus_num, t.VAT_cur_code, t.VAT_led_code, t.VAT_sub_acct_code, t.vat.ToString(), Fee_expl_code, xremark3);
        xg.endCredit();

        xg.closeXML();

        try
        {
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer from Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returened values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
            string error_text = xg.debits[0]["err_text"].InnerText;

            StringBuilder resp = new StringBuilder();
            resp.Append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
            resp.Append("<intTrnxResp>");
            resp.Append("<totaldebit>" + xg.credits[0]["amount"].InnerText + "</totaldebit>");
            resp.Append("<remark>" + xremark1 + "</remark>");
            resp.Append("<principal>");
            resp.Append("<acc_num>");
            resp.Append(t.inCust.bra_code + TSS_cus_num + TSS_cur_code + TSS_led_code + TSS_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[0]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[0]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[0]["err_text"].InnerText + "</responseText>");
            resp.Append("</principal>");
            resp.Append("<fee>");
            resp.Append("<acc_num>");
            resp.Append(t.inCust.bra_code + FEE_cus_num + FEE_cur_code + FEE_led_code + FEE_sub_acct_code);
            resp.Append("</acc_num>");
            resp.Append("<tra_seq>" + xg.debits[1]["tra_seq"].InnerText + "</tra_seq>");
            resp.Append("<responseCode>" + xg.debits[1]["return_status"].InnerText + "</responseCode>");
            resp.Append("<responseText>" + xg.debits[1]["err_text"].InnerText + "</responseText>");
            resp.Append("</fee>");
            resp.Append("</intTrnxResp>");
            ResponseMsg = resp.ToString();

        }
        catch (Exception ex)
        {
            new ErrorLog("Unable to debit customer account " + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " for amount " + t.amount.ToString() + " and fee charge " + t.feecharge.ToString() + ex);
            Respreturnedcode1 = "1x";
        }
    }

    //public void authorizeTrnxToSterling_DD(Transaction t)
    //{
    //    //debit customer and credit tss
    //    RespCreditedamt = "x";
    //    Respreturnedcode1 = "x";
    //    Respreturnedcode2 = "x";
    //    Gadget g = new Gadget();

    //DataSet dsTss = ts.getCurrentTss();
    //DataSet dsFee = ts.getCurrentIncomeAcct();
    //    if (dsTss.Tables[0].Rows.Count > 0)
    //    {
    //        DataRow drTss = dsTss.Tables[0].Rows[0];
    //        TSS_cus_num = drTss["cusnum"].ToString();
    //        TSS_cur_code = drTss["curcode"].ToString();
    //        TSS_led_code = drTss["ledcode"].ToString();
    //        TSS_sub_acct_code = drTss["subacctcode"].ToString();
    //    }
    //    //assign the income account to the variables
    //    if (dsFee.Tables[0].Rows.Count > 0)
    //    {
    //        DataRow drFee = dsFee.Tables[0].Rows[0];
    //        FEE_cus_num = drFee["cusnum"].ToString();
    //        FEE_cur_code = drFee["curcode"].ToString();
    //        FEE_led_code = drFee["ledcode"].ToString();
    //        FEE_sub_acct_code = drFee["subacctcode"].ToString();
    //    }

    //    string xremark1 = "NIBSS From " + t.Remark;
    //    string xremark2 = "NIBSS From " + t.Remark;

    //    XMLGenerator xg = new XMLGenerator(t.tellerID);

    //    xg.startDebit();
    //    xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), "905", xremark1);
    //    xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.feecharge.ToString(), "905", xremark2);
    //    xg.endDebit();

    //    xg.startCredit();
    //    xg.addAccount(t.inCust.bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), "905", xremark1);
    //    xg.addAccount(t.inCust.bra_code, FEE_cus_num, FEE_cur_code, FEE_led_code, FEE_sub_acct_code, t.feecharge.ToString(), "905", xremark2);
    //    xg.endCredit();

    //    xg.closeXML();

    //    //uncomment this part letter
    //    try
    //    {
    //        vteller.nfp vs = new vteller.nfp();
    //        xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer from Sterling " + t.Refid);
    //        xg.parseResponse();

    //        ////collect returened values
    //        RespCreditedamt = xg.credits[0]["amount"].InnerText;
    //        Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
    //        Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
    //    }
    //    catch (Exception ex)
    //    {
    //        new ErrorLog(ex);
    //    }
    //}

    public void authorizeTrnxToSterling(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";
        Gadget g = new Gadget();

        string expl_code = "";

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }

        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();

        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }

        //string xremark1 = "NIBSS Transfer by Order of " + g.RemoveSpecialChars(t.outCust.cusname) + " in favour of " + g.RemoveSpecialChars(t.inCust.cus_sho_name);
        //string xremark2 = "Commission Received NIBSS Transfer";

        t.paymentRef = t.paymentRef.Replace("&amp;", "&");
        t.paymentRef = t.paymentRef.Replace("&apos;", "'");
        t.paymentRef = t.paymentRef.Replace("&quot;", "\"");

        t.paymentRef = t.paymentRef.Replace("& ", "&amp;");
        t.paymentRef = t.paymentRef.Replace("'", "&apos;");
        t.paymentRef = t.paymentRef.Replace("\"", "&quot;");

        t.narration = t.narration.Replace("&amp;", "&");
        t.narration = t.narration.Replace("&apos;", "'");
        t.narration = t.narration.Replace("&quot;", "\"");

        t.narration = t.narration.Replace("& ", "&amp;");
        t.narration = t.narration.Replace("'", "&apos;");
        t.narration = t.narration.Replace("\"", "&quot;");

        t.senderAcctname = t.senderAcctname.Replace("&amp;", "&");
        t.senderAcctname = t.senderAcctname.Replace("&apos;", "'");
        t.senderAcctname = t.senderAcctname.Replace("&quot;", "\"");

        t.senderAcctname = t.senderAcctname.Replace("& ", "&amp;");
        t.senderAcctname = t.senderAcctname.Replace("'", "&apos;");
        t.senderAcctname = t.senderAcctname.Replace("\"", "&quot;");

        string xrem = t.Remark + t.sessionid + " PAYREF:" + t.paymentRef +
            " SENDER: " + t.senderAcctname + " REMARK: " + t.narration;
        if (xrem.Length > 180)
        {
            xrem = xrem.Substring(0, 180); //banks colum takes 200 max
        }
        string xremark1 = "NIP From " + xrem;
        string xremark2 = "NIPFEE From " + xrem;

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, "0", Fee_expl_code, xremark2);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, "0", Fee_expl_code, xremark2);
        //xg.addAccount(t.inCust.bra_code, FEE_cus_num, FEE_cur_code, FEE_led_code, FEE_sub_acct_code, "0", "905", xremark2);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, "0", Fee_expl_code, xremark2);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, "0", Fee_expl_code, xremark2);
        xg.endCredit();

        xg.closeXML();

        try
        {
            //uncomment this part letter
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer To Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returned values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
        }
        catch (Exception ex)
        {
            new ErrorLog("unable to credit Customer account " + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " with amount " + t.amount.ToString() + ex);
        }
    }

    public void authorizeTrnxReversal(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";
        Gadget g = new Gadget();


        string expl_code = "";

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }

        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }

        string xremark1 = "NIP Reversal " + "/" + t.sessionid;
        string xremark2 = "NIPFEE Reversal " + "/" + t.sessionid;

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, calculateFee(t.amount).ToString(), Fee_expl_code, xremark2);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, calculateFee(t.amount).ToString(), Fee_expl_code, xremark2);
        xg.endCredit();

        xg.closeXML();

        //uncomment this part letter
        try
        {
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer To Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returned values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
        }
        catch (Exception ex)
        {
            new ErrorLog("Unable to do Reversal for customer account " + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " for amount " + t.amount.ToString() + " and fee charge " + calculateFee(t.amount).ToString() + ex);
        }
    }
    public void authorizeTrnxReversalMobile(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";
        Gadget g = new Gadget();

        string expl_code = "";

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }
        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }

        string xremark1 = "NIP Reversal " + "/" + t.sessionid;
        string xremark2 = "NIPFEE Reversal " + "/" + t.sessionid;

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.endCredit();

        xg.closeXML();

        //uncomment this part letter
        try
        {
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer To Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returned values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
        }
        catch (Exception ex)
        {
            new ErrorLog("Unable to do Mobile Reversal for customer account" + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " for amount " + t.amount.ToString() + " and fee charge " + t.feecharge.ToString() + ex);
        }
    }
    public void authorizeTrnxReversalIBS(Transaction t)
    {
        RespCreditedamt = "x";
        Respreturnedcode1 = "x";
        Respreturnedcode2 = "x";
        Gadget g = new Gadget();

        string expl_code = "";

        DataSet dsExp = ts.getExpcode();
        if (dsExp.Tables[0].Rows.Count > 0)
        {
            DataRow drexp = dsExp.Tables[0].Rows[0];
            expl_code = drexp["expcodeVal"].ToString();
        }
        else
        {
        }
        DataSet dsTss = ts.getCurrentTss();
        DataSet dsFee = ts.getCurrentIncomeAcct();
        if (dsTss.Tables[0].Rows.Count > 0)
        {
            DataRow drTss = dsTss.Tables[0].Rows[0];
            TSS_bra_code = drTss["bra_code"].ToString();
            TSS_cus_num = drTss["cusnum"].ToString();
            TSS_cur_code = drTss["curcode"].ToString();
            TSS_led_code = drTss["ledcode"].ToString();
            TSS_sub_acct_code = drTss["subacctcode"].ToString();
        }
        //assign the income account to the variables
        if (dsFee.Tables[0].Rows.Count > 0)
        {
            DataRow drFee = dsFee.Tables[0].Rows[0];
            FEE_cus_num = drFee["cusnum"].ToString();
            FEE_cur_code = drFee["curcode"].ToString();
            FEE_led_code = drFee["ledcode"].ToString();
            FEE_sub_acct_code = drFee["subacctcode"].ToString();
        }

        string xremark1 = "NIP Reversal " + "/" + t.sessionid;
        string xremark2 = "NIPFEE Reversal " + "/" + t.sessionid;

        XMLGenerator xg = new XMLGenerator(t.tellerID);

        xg.startDebit();
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(TSS_bra_code, TSS_cus_num, TSS_cur_code, TSS_led_code, TSS_sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.endDebit();

        xg.startCredit();
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.amount.ToString(), expl_code, xremark1);
        xg.addAccount(t.inCust.bra_code, t.inCust.cus_num, t.inCust.cur_code, t.inCust.led_code, t.inCust.sub_acct_code, t.feecharge.ToString(), Fee_expl_code, xremark2);
        xg.endCredit();

        xg.closeXML();

        //uncomment this part letter
        try
        {
            vteller.nfp vs = new vteller.nfp();
            xg.resp = vs.NIBBS(xg.req, "NIBSS Transfer To Sterling " + t.Refid);
            xg.parseResponse();

            ////collect returned values
            RespCreditedamt = xg.credits[0]["amount"].InnerText;
            Respreturnedcode1 = xg.debits[0]["return_status"].InnerText;
            Respreturnedcode2 = xg.debits[1]["return_status"].InnerText;
        }
        catch (Exception ex)
        {
            new ErrorLog("Unable to do Mobile Reversal for customer account" + t.inCust.bra_code + t.inCust.cus_num + t.inCust.cur_code + t.inCust.led_code + t.inCust.sub_acct_code + " for amount " + t.amount.ToString() + " and fee charge " + t.feecharge.ToString() + ex);
        }
    }
    public Account getBalance(Account a)
    {
        try
        {
            sbp.banks bank = new sbp.banks();
            DataSet ds = bank.getCusBalance(a.bra_code, a.cus_num, a.cur_code, a.led_code,a.sub_acct_code); //Live Banks
            //DataSet ds = bank.getCusBalanceTest(a.bra_code, a.cus_num, a.cur_code, a.led_code,a.sub_acct_code); //TestBanks

            if (ds.Tables[0].Rows.Count > 0)
            {
                DataRow dr = ds.Tables[0].Rows[0];
                a.rtnMssg = 1;
                a.avail_bal = Convert.ToDecimal(dr["avail_bal"]);
                a.cle_bal = Convert.ToDecimal(dr["cle_bal"]);
                a.cus_sho_name = Convert.ToString(dr["CUS_SHO_NAME"]);
                a.bal_limit = Convert.ToDecimal(dr["bal_lim"]);
                a.status = Convert.ToInt32(dr["sta_code"]);
            }
            else
            {
                a.rtnMssg = 2;
                a.ref_key = "";
                //a.cle_bal = null;
            }
        }
        catch (Exception ex)
        {
            ErrorLog err = new ErrorLog(ex);
        }
        return a;
    }
}
