using System;
using System.Web;
using System.Data;
using System.Collections;
using System.Web.Services;
using System.Web.Services.Protocols;


/// <summary>
/// Summary description for mobile
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
public class mobile : System.Web.Services.WebService {

    string updateVal="";
    [WebMethod]
    public string DebitandSendtoNIBSS(string sessionid, string bracodeval, string cusnumval, string curcodeval,
        string ledcodeval, string subacctval, string amt, string fee, string orignatorName, string DestinationBankCode, 
        string ChannelCode, string AccountName, string AccountNumber, string paymentRef, string cusshowname)
    {
        string msg;
        string ledger = "";
        string logval = "0";
        Gadget g = new Gadget();
        AccountService acs = new AccountService();
        Transaction t = new Transaction();
        TransactionService tsv = new TransactionService();
        string sessionidNE = "";
        //sessionID for Name Enquiry
        //sessionidNE = g.newSessionId(DestinationBankCode);
        
        t.bra_code = bracodeval;
        t.cusnum = cusnumval;
        t.curcode = curcodeval;
        t.ledcode = ledcodeval;
        t.subacctcode = subacctval;
        t.paymentRef = paymentRef;
        t.amount = decimal.Parse(amt);
        t.destinationcode = DestinationBankCode;
        t.transactionCode = g.newTrnxRef(bracodeval);
        t.originatorname = orignatorName;
        t.feecharge = decimal.Parse(fee);
        t.AccountName = AccountName;
        t.AccountNumber = AccountNumber;
        t.channelCode = 3;//mobile transaction

        sessionidNE = g.newSessionGlobal(t.bra_code, t.channelCode); //g.newSessionId(DestinationBankCode, t.bra_code, t.channelCode);

        t.sessionid = sessionidNE;
        string acct = bracodeval + cusnumval + curcodeval + ledcodeval + subacctval;

        //get The new fee and VAT
        try
        {
            bool foundval = g.isBankCodeFound(bracodeval);
            if (foundval)
            {
                vatNUBAN = "0002763658";
                if (acs.getNIPFee(t.amount))
                {
                    t.feecharge = acs.NIPfee;
                    t.vat = acs.NIPvat;
                    t.VAT_bra_code = t.bra_code;
                    t.VAT_cus_num = "";
                    t.VAT_cur_code = "NGN";
                    t.VAT_led_code = "17201";
                    Last4 = int.Parse(t.VAT_bra_code.Substring(6, 3)) + 2000;
                    TSSAcct = "NGN" + t.VAT_led_code + "0001" + Last4.ToString();
                    t.VAT_sub_acct_code = vatNUBAN;
                }
                else
                {
                    msg = "Error: Unable to compute VAT and Fee for account " + acct;
                    return "24:" + msg;
                }
            }
            else
            {
                vatNUBAN = "0002763658";
                if (acs.getNIPFee(t.amount))
                {
                    t.feecharge = acs.NIPfee;
                    t.vat = acs.NIPvat;
                    t.VAT_bra_code = "NG0020001";
                    t.VAT_cus_num = "0";
                    t.VAT_cur_code = "NGN";
                    t.VAT_led_code = "17201";
                    Last4 = int.Parse(t.VAT_bra_code.Substring(6, 3)) + 2000;
                    TSSAcct = "NGN" + t.VAT_led_code + "0001" + Last4.ToString();
                    t.VAT_sub_acct_code = vatNUBAN;
                }
                else
                {
                    msg = "Error: Unable to compute VAT and Fee for account " + acct;
                    return "24:" + msg;
                }
            }
        }
        catch (Exception ex)
        {
            new ErrorLog("Error occured " + ex);
            msg = "Error: Unable to compute VAT and Fee for account " + acct;
            return "24:" + msg;
        }
        ////if (t.bra_code == "201" || t.bra_code == "223" || t.bra_code == "259" || t.bra_code == "257" || t.bra_code == "213" || t.bra_code == "242" || t.bra_code == "226" || t.bra_code == "260" || t.bra_code == "229" || t.bra_code == "211")
        //if (t.bra_code == "201" || t.bra_code == "223" || t.bra_code == "259" || t.bra_code == "257" ||
        //   t.bra_code == "213" || t.bra_code == "242" || t.bra_code == "226" || t.bra_code == "260" ||
        //   t.bra_code == "229" || t.bra_code == "211" || t.bra_code == "202" || t.bra_code == "204" ||
        //   t.bra_code == "205" || t.bra_code == "206" || t.bra_code == "207" || t.bra_code == "208" ||
        //   t.bra_code == "209" || t.bra_code == "210" || t.bra_code == "212" || t.bra_code == "214" ||
        //   t.bra_code == "215" || t.bra_code == "216" || t.bra_code == "217" || t.bra_code == "218" ||
        //   t.bra_code == "219" || t.bra_code == "220" || t.bra_code == "221" || t.bra_code == "222" ||
        //   t.bra_code == "225" || t.bra_code == "227" || t.bra_code == "228" || t.bra_code == "230" ||
        //   t.bra_code == "231" || t.bra_code == "232" || t.bra_code == "234" || t.bra_code == "235" ||
        //   t.bra_code == "236" || t.bra_code == "237" || t.bra_code == "238" || t.bra_code == "240" ||
        //   t.bra_code == "241" || t.bra_code == "243" || t.bra_code == "244" || t.bra_code == "245" ||
        //   t.bra_code == "246" || t.bra_code == "247" || t.bra_code == "248" || t.bra_code == "250" ||
        //   t.bra_code == "252" || t.bra_code == "253" || t.bra_code == "254" || t.bra_code == "256" ||
        //   t.bra_code == "262" || t.bra_code == "262" || t.bra_code == "264" || t.bra_code == "265" ||
        //   t.bra_code == "267" || t.bra_code == "268" || t.bra_code == "271" || t.bra_code == "274" ||
        //   t.bra_code == "276" || t.bra_code == "279" || t.bra_code == "280" || t.bra_code == "285" ||
        //   t.bra_code == "286" || t.bra_code == "287" || t.bra_code == "288" || t.bra_code == "289" ||
        //   t.bra_code == "290" || t.bra_code == "291" || t.bra_code == "292" || t.bra_code == "293" ||
        //   t.bra_code == "294" || t.bra_code == "295" || t.bra_code == "296" ||

        //    t.bra_code == "301" || t.bra_code == "302" || t.bra_code == "303" || t.bra_code == "304" ||
        //        t.bra_code == "305" || t.bra_code == "306" || t.bra_code == "307" || t.bra_code == "308" ||
        //        t.bra_code == "309" || t.bra_code == "310" || t.bra_code == "311" || t.bra_code == "312" ||
        //        t.bra_code == "313" || t.bra_code == "314" || t.bra_code == "316" || t.bra_code == "317" ||
        //        t.bra_code == "318" || t.bra_code == "319" || t.bra_code == "320" || t.bra_code == "321" ||
        //        t.bra_code == "322" || t.bra_code == "323" || t.bra_code == "324" || t.bra_code == "325" ||
        //        t.bra_code == "326" || t.bra_code == "328" || t.bra_code == "329" || t.bra_code == "330" ||
        //        t.bra_code == "331" || t.bra_code == "332" || t.bra_code == "334" || t.bra_code == "338" ||
        //        t.bra_code == "340" || t.bra_code == "341" || t.bra_code == "342" || t.bra_code == "343" ||
        //        t.bra_code == "344" || t.bra_code == "345" || t.bra_code == "401" || t.bra_code == "402" ||
        //        t.bra_code == "403" || t.bra_code == "404" || t.bra_code == "405" || t.bra_code == "406" ||
        //        t.bra_code == "408" || t.bra_code == "409" || t.bra_code == "410" || t.bra_code == "411" ||
        //        t.bra_code == "413" || t.bra_code == "416" || t.bra_code == "417" || t.bra_code == "418" ||
        //        t.bra_code == "419" || t.bra_code == "420" || t.bra_code == "422" || t.bra_code == "423" ||
        //        t.bra_code == "424" || t.bra_code == "425" || t.bra_code == "503" || t.bra_code == "504" ||
        //        t.bra_code == "506" || t.bra_code == "507" || t.bra_code == "508" || t.bra_code == "509" ||
        //        t.bra_code == "510" || t.bra_code == "511" || t.bra_code == "512" || t.bra_code == "513" ||
        //        t.bra_code == "514" || t.bra_code == "515" || t.bra_code == "516" || t.bra_code == "517" ||
        //        t.bra_code == "518" || t.bra_code == "519" || t.bra_code == "520" || t.bra_code == "521" ||
        //        t.bra_code == "522" || t.bra_code == "523" || t.bra_code == "524" || t.bra_code == "525" ||
        //        t.bra_code == "526" || t.bra_code == "528" || t.bra_code == "531" || t.bra_code == "532" ||
        //        t.bra_code == "533" || t.bra_code == "534" || t.bra_code == "535" || t.bra_code == "536" ||
        //        t.bra_code == "537" || t.bra_code == "538" || t.bra_code == "539" || t.bra_code == "540" ||
        //        t.bra_code == "541" || t.bra_code == "542" || t.bra_code == "544" || t.bra_code == "545" ||
        //        t.bra_code == "546" || t.bra_code == "547" || t.bra_code == "548" || t.bra_code == "902" ||
        //        t.bra_code == "903")
        //{
        //    if (acs.getNIPFee(t.amount))
        //    {
        //        t.feecharge = acs.NIPfee;
        //        t.vat = acs.NIPvat;
        //        //t.VAT_bra_code = "900";
        //        t.VAT_bra_code = t.bra_code;
        //        t.VAT_cus_num = "0";
        //        t.VAT_cur_code = "1";
        //        t.VAT_led_code = "4522";
        //        t.VAT_sub_acct_code = "0";
        //    }
        //    else
        //    {
        //        msg = "Error: Unable to compute VAT and Fee for account " + acct;
        //        //return "2:" + logval.ToString();// msg;
        //        return "24:" + msg;
        //    }
        //}
        //else
        //{
        //    //if (acs.getNIPFee(t.amount))
        //    //{
        //    //    t.feecharge = acs.NIPfee;
        //    //    t.vat = acs.NIPvat;
        //    //    t.VAT_bra_code = "900";
        //    //    t.VAT_cus_num = "0";
        //    //    t.VAT_cur_code = "1";
        //    //    t.VAT_led_code = "4522";
        //    //    t.VAT_sub_acct_code = "0";
        //    //}
        //    //else
        //    //{
        //    //    msg = "Error: Unable to compute VAT and Fee for account " + acct;
        //    //    //return "2:" + logval.ToString();// msg;
        //    //    return "24:" + msg;
        //    //}
        //    //if (t.bra_code == "201" || t.bra_code == "223")

        //    //if (t.bra_code == "201" || t.bra_code == "223" || t.bra_code == "259" || t.bra_code == "257" || t.bra_code == "213" || t.bra_code == "242" || t.bra_code == "226" || t.bra_code == "260" || t.bra_code == "229" || t.bra_code == "211")
        //    if (t.bra_code == "201" || t.bra_code == "223" || t.bra_code == "259" || t.bra_code == "257" ||
        //   t.bra_code == "213" || t.bra_code == "242" || t.bra_code == "226" || t.bra_code == "260" ||
        //   t.bra_code == "229" || t.bra_code == "211" || t.bra_code == "202" || t.bra_code == "204" ||
        //   t.bra_code == "205" || t.bra_code == "206" || t.bra_code == "207" || t.bra_code == "208" ||
        //   t.bra_code == "209" || t.bra_code == "210" || t.bra_code == "212" || t.bra_code == "214" ||
        //   t.bra_code == "215" || t.bra_code == "216" || t.bra_code == "217" || t.bra_code == "218" ||
        //   t.bra_code == "219" || t.bra_code == "220" || t.bra_code == "221" || t.bra_code == "222" ||
        //   t.bra_code == "225" || t.bra_code == "227" || t.bra_code == "228" || t.bra_code == "230" ||
        //   t.bra_code == "231" || t.bra_code == "232" || t.bra_code == "234" || t.bra_code == "235" ||
        //   t.bra_code == "236" || t.bra_code == "237" || t.bra_code == "238" || t.bra_code == "240" ||
        //   t.bra_code == "241" || t.bra_code == "243" || t.bra_code == "244" || t.bra_code == "245" ||
        //   t.bra_code == "246" || t.bra_code == "247" || t.bra_code == "248" || t.bra_code == "250" ||
        //   t.bra_code == "252" || t.bra_code == "253" || t.bra_code == "254" || t.bra_code == "256" ||
        //   t.bra_code == "262" || t.bra_code == "262" || t.bra_code == "264" || t.bra_code == "265" ||
        //   t.bra_code == "267" || t.bra_code == "268" || t.bra_code == "271" || t.bra_code == "274" ||
        //   t.bra_code == "276" || t.bra_code == "279" || t.bra_code == "280" || t.bra_code == "285" ||
        //   t.bra_code == "286" || t.bra_code == "287" || t.bra_code == "288" || t.bra_code == "289" ||
        //   t.bra_code == "290" || t.bra_code == "291" || t.bra_code == "292" || t.bra_code == "293" ||
        //   t.bra_code == "294" || t.bra_code == "295" || t.bra_code == "296" ||

        //    t.bra_code == "301" || t.bra_code == "302" || t.bra_code == "303" || t.bra_code == "304" ||
        //        t.bra_code == "305" || t.bra_code == "306" || t.bra_code == "307" || t.bra_code == "308" ||
        //        t.bra_code == "309" || t.bra_code == "310" || t.bra_code == "311" || t.bra_code == "312" ||
        //        t.bra_code == "313" || t.bra_code == "314" || t.bra_code == "316" || t.bra_code == "317" ||
        //        t.bra_code == "318" || t.bra_code == "319" || t.bra_code == "320" || t.bra_code == "321" ||
        //        t.bra_code == "322" || t.bra_code == "323" || t.bra_code == "324" || t.bra_code == "325" ||
        //        t.bra_code == "326" || t.bra_code == "328" || t.bra_code == "329" || t.bra_code == "330" ||
        //        t.bra_code == "331" || t.bra_code == "332" || t.bra_code == "334" || t.bra_code == "338" ||
        //        t.bra_code == "340" || t.bra_code == "341" || t.bra_code == "342" || t.bra_code == "343" ||
        //        t.bra_code == "344" || t.bra_code == "345" || t.bra_code == "401" || t.bra_code == "402" ||
        //        t.bra_code == "403" || t.bra_code == "404" || t.bra_code == "405" || t.bra_code == "406" ||
        //        t.bra_code == "408" || t.bra_code == "409" || t.bra_code == "410" || t.bra_code == "411" ||
        //        t.bra_code == "413" || t.bra_code == "416" || t.bra_code == "417" || t.bra_code == "418" ||
        //        t.bra_code == "419" || t.bra_code == "420" || t.bra_code == "422" || t.bra_code == "423" ||
        //        t.bra_code == "424" || t.bra_code == "425" || t.bra_code == "503" || t.bra_code == "504" ||
        //        t.bra_code == "506" || t.bra_code == "507" || t.bra_code == "508" || t.bra_code == "509" ||
        //        t.bra_code == "510" || t.bra_code == "511" || t.bra_code == "512" || t.bra_code == "513" ||
        //        t.bra_code == "514" || t.bra_code == "515" || t.bra_code == "516" || t.bra_code == "517" ||
        //        t.bra_code == "518" || t.bra_code == "519" || t.bra_code == "520" || t.bra_code == "521" ||
        //        t.bra_code == "522" || t.bra_code == "523" || t.bra_code == "524" || t.bra_code == "525" ||
        //        t.bra_code == "526" || t.bra_code == "528" || t.bra_code == "531" || t.bra_code == "532" ||
        //        t.bra_code == "533" || t.bra_code == "534" || t.bra_code == "535" || t.bra_code == "536" ||
        //        t.bra_code == "537" || t.bra_code == "538" || t.bra_code == "539" || t.bra_code == "540" ||
        //        t.bra_code == "541" || t.bra_code == "542" || t.bra_code == "544" || t.bra_code == "545" ||
        //        t.bra_code == "546" || t.bra_code == "547" || t.bra_code == "548" || t.bra_code == "902" ||
        //        t.bra_code == "903")
        //    {
        //        if (acs.getNIPFee(t.amount))
        //        {
        //            t.feecharge = acs.NIPfee;
        //            t.vat = acs.NIPvat;
        //            //t.VAT_bra_code = "900";
        //            t.VAT_bra_code = t.bra_code;
        //            t.VAT_cus_num = "0";
        //            t.VAT_cur_code = "1";
        //            t.VAT_led_code = "4522";
        //            t.VAT_sub_acct_code = "0";
        //        }
        //        else
        //        {
        //            msg = "Error: Unable to compute VAT and Fee for account " + acct;
        //            //return "2:" + logval.ToString();// msg;
        //            return "24:" + msg;
        //        }
        //    }
        //    else
        //    {
        //        if (acs.getNIPFee(t.amount))
        //        {
        //            t.feecharge = acs.NIPfee;
        //            t.vat = acs.NIPvat;
        //            t.VAT_bra_code = "900";
        //            t.VAT_cus_num = "0";
        //            t.VAT_cur_code = "1";
        //            t.VAT_led_code = "4522";
        //            t.VAT_sub_acct_code = "0";
        //        }
        //        else
        //        {
        //            msg = "Error: Unable to compute VAT and Fee for account " + acct;
        //            //return "2:" + logval.ToString();// msg;
        //            return "24:" + msg;
        //        }
        //    }
        //}
        //if (acs.getNIPFee(t.amount))
        //{
        //    t.feecharge = acs.NIPfee;
        //    t.vat = acs.NIPvat;
        //    t.VAT_bra_code = "900";
        //    t.VAT_cus_num = "0";
        //    t.VAT_cur_code = "1";
        //    t.VAT_led_code = "4522";
        //    t.VAT_sub_acct_code = "0";
        //}
        //else
        //{
        //    //msg = "Error: Unable to debit customer's account for Principal";
        //    msg = "Error1:Sorry, your account balance is not sufficient for this transaction.Kindly fund your account.";
        //    return msg;
        //}
        
        //Log transaction Request First
        //logval = tsv.InsertNameMobileTrans(t);
        logval = tsv.InsertOutgoingNibss(t);
        if (t.curcode != "1")
        {
            new ErrorLog("57:Transaction is permitted on naira accounts only" + acct + " Refid " + logval);
            msg = "Error1:Transaction is permitted on naira accounts only";
            return msg;
        }

        //check if the destination bank code is allowed
        //check if the sending bank is active in our list of participating bank
        string Sid = sessionidNE;
        //
        //Sid = Sid.Substring(0, 3);
        //update by Dayo - 2013-09-16
        //sample session id = 232011130914125301422423514834
        
        
        Sid = Sid.Substring(3, 3);

        string sqlSid = "";
        sqlSid = "select * from tbl_participatingBanks where bankcode = @bcode and statusflag=1";
        Connect cSid = new Connect(sqlSid, true);
        cSid.addparam("@bcode", Sid);
        DataSet dsSid = cSid.query("rec");
        if (dsSid.Tables[0].Rows.Count == 0)
        {
            new ErrorLog("57:Transaction is not permitted to the destination bank" + acct + " Refid " + logval);
            msg = "Error1:Transaction is not permitted to the destination bank";
            return msg;
        }

        t.Refid = Int32.Parse(logval);
        //Do Name Enquiry to NIBSS
        TR_SingleNameEnquiry sne = new TR_SingleNameEnquiry();
        sne.SessionID = sessionidNE;// g.newSessionId(DestinationBankCode);
        //sne.DestinationBankCode = DestinationBankCode;
        sne.DestinationInstitutionCode = DestinationBankCode;
        sne.ChannelCode = "3";
        sne.AccountNumber = AccountNumber;
        sne.createRequest();
        //send name enquiry request to NIBSS
        sne.sendRequest();

        if (sne.ResponseCode != "00") //check if response 
        {
            //unsuccessful
            t.AccountName = "";
            
            t.ResponseCode = sne.ResponseCode;
            tsv.UpdateMobileTransactions(t);

            //msg = "NIBSS Error: " + sne.ResponseCode + ", [" + g.responseCodes(sne.ResponseCode) + "]";
            msg = "Error2: " + "" + g.responseCodes(sne.ResponseCode) + "";
            return msg;
        }
        else
        {
            //successful
            //update the table with the 
            t.AccountName = sne.AccountName;
            //t.Refid = Int32.Parse(logval);
            t.ResponseCode = sne.ResponseCode;
            tsv.UpdateMobileTransactions(t);
        }

        //go and get the operational fee/income ledger from database
        //DataSet dsledger = tsv.getCurrentIncomeAcct();
        //if (dsledger.Tables[0].Rows.Count > 0)
        //{
        //    DataRow drledger = dsledger.Tables[0].Rows[0];
        //    ledger = drledger["ledcode"].ToString();
        //}
        //ensure that the TSS and Income ledger is ok
        //if (!acs.checkTSSandFeesAccount(ledger, t.bra_code))
        //{
        //    //accounts are not okay
        //    msg = "Error! \n TSS account.";
        //    return msg;
        //}

        //if (!acs.tssACCok) //is TSS ok?
        //{
        //    msg = "";
        //    return msg; //stop
        //}

        //if (!acs.feeACCok) //is Fee ok?
        //{
        //    //print err
        //    msg = "Fee Account is not ok";
        //    return msg; //stop
        //}

        t.tellerID = "9990";
        //compute the amount to pay

        t.transactionCode = g.newTrnxRef(bracodeval);

        t.origin_branch = t.bra_code;
        t.inCust.cus_sho_name = orignatorName;
        t.outCust.cusname = g.RemoveSpecialChars(sne.AccountName) + "/" + t.transactionCode;

        t.inCust.bra_code = t.bra_code;
        t.inCust.cus_num = t.cusnum;
        t.inCust.cur_code = t.curcode;
        t.inCust.led_code = t.ledcode;
        t.inCust.sub_acct_code = t.subacctcode;

        string NewSessionid = g.newSessionId(DestinationBankCode);
        t.sessionid = NewSessionid; //sessionid for Funds Transfer

        tsv.UpdateFTSessionID(t.Refid, t.sessionid);


        //check if the ledger is 84 if it is then check the amount
        if (t.ledcode == "84")
        {
            //check if the amount is greather than 20000
            if (t.amount > 20000)
            {
                //12 invalid Transaction
                return g.responseCodes("12");// msg;
            }
        }
        
        //do not allow ledger 57-- added 08-Nov-2013
        if (t.ledcode == "57" || t.ledcode == "74" || t.ledcode == "66" || t.ledcode == "67" || t.ledcode == "68" || t.ledcode == "70" || t.ledcode == "71" || t.ledcode == "72" || t.ledcode == "78" || t.ledcode == "97" || t.ledcode == "98" || t.ledcode == "99")
        {
            new ErrorLog("57:Transaction not permitted " + acct + " Refid " + logval);
            msg = "57:Transaction not permitted";
            return msg;
        }
        
        acs.authorizeTrnxFromSterling(t);
        if (acs.Respreturnedcode1 == "1x")
        {
            tsv.UpdateMobilevTeller(t, 3);//vTeller timed out
            msg = "Error1: Transaction was not completed. Please check your balance " +
                "before performing another transaction";

            t.ResponseCode = "1x";
            t.Refid = Int32.Parse(logval);
            int cn1 = tsv.UpdateMobileTrans(t);
            return msg;
        }

        if (acs.Respreturnedcode1 != "0")
        {
            tsv.UpdateMobilevTeller(t, 2);//unable to debit
            //msg = "Error: Unable to debit customer's account for Principal";
            msg = "Error1: customer does not have sufficient amount";
            return msg;
        }

        //mark trans type
        MarkTransType mt = new MarkTransType();
        mt.markTransType(t.Refid);

        //update vTeller Message column
        tsv.UpdateMobilevTeller(t, 1);//debited successfully
        msg = "Customer has been debitted!";

        //if successful

        TR_SingleFundTransferDC sft = new TR_SingleFundTransferDC();
        sft.SessionID = NewSessionid;// t.sessionid;
        sft.DestinationInstitutionCode = DestinationBankCode;
        sft.ChannelCode = ChannelCode;
        sft.BeneficiaryAccountName = sne.AccountName;
        sft.BeneficiaryAccountNumber = AccountNumber;
        sft.OriginatorAccountName = orignatorName;
        sft.Narration = "Transfer from " + cusshowname + " to " + sne.AccountName;
        sft.PaymentReference = paymentRef;
        t.paymentRef = paymentRef;
        sft.Amount = amt;
        //sft.SessionID = NewSessionid;// t.sessionid;
        //sft.DestinationBankCode = DestinationBankCode;
        //sft.ChannelCode = ChannelCode;
        //sft.AccountName = sne.AccountName;
        //sft.AccountNumber = AccountNumber;
        //sft.OriginatorName = orignatorName;
        //sft.Narration = "Transfer from " + cusshowname + " to " + sne.AccountName;
        ////if (paymentRef.Length > 100)
        ////{
        ////    paymentRef = paymentRef.Substring(0, 100);
        ////}
        //sft.PaymentReference = paymentRef;
        //t.paymentRef = paymentRef;
        //sft.Amount = amt;
        sft.createRequest();
        
        TransactionService trs = new TransactionService();
        //send Funds Transfer Request to NIBSS
        sft.sendRequest();

        string rspstmt = "";
        switch (sft.ResponseCode)
        {
            case "00":
                //success
                rspstmt = acs.ResponseMsg;
                break;
            case "03": //txt = "Invalid sender"; break;
            case "05": //txt = "Do not honor"; break;
            case "06": //txt = "Dormant account"; break;
            case "07": //txt = "Invalid account"; break;
            case "08": //txt = "Account name mismatch"; break;
            case "09": //txt = "Request processing in progress"; break;
            case "12": //txt = "Invalid transaction"; break;
            case "13": //txt = "Invalid amount"; break;
            case "14": //txt = "Invalid Batch Number"; break;
            case "15": //txt = "Invalid Session or Record ID"; break;
            case "16": //txt = "Unknown Bank Code"; break;
            case "17": //txt = "Invalid Channel"; break;
            case "18": //txt = "Wrong Method Call"; break;
            case "21": //txt = "No action taken"; break;
            case "25": //txt = "Unable to locate record"; break;
            case "26": //txt = "Duplicate record"; break;
            case "30": //txt = "Wrong destination account format"; break;
            case "34": //txt = "Suspected fraud"; break;
            case "35": //txt = "Contact sending bank"; break;
            case "51": //txt = "No sufficient funds"; break;
            case "57": //txt = "Transaction not permitted to sender"; break;
            case "58": //txt = "Transaction not permitted on channel"; break;
            case "61": //txt = "Transfer Limit Exceeded"; break;
            case "63": //txt = "Security violation"; break;
            case "65": //txt = "Exceeds withdrawal frequency"; break;
            case "68": //txt = "Response received too late"; break;
            case "91": //txt = "Beneficiary Bank not available"; break;
            case "92": //txt = "Routing Error"; break;
            case "94": //txt = "Duplicate Transaction"; break;
            case "96": //txt = "Corresponding Bank is currently offline."; break;
            case "97": //txt = "Timeout waiting for response from destination."; break;
                string rsp = NIPReversal(logval);
                //rspstmt =  "Error: " + sft.ResponseCode + ", [" + rsp + "]";
                //rspstmt = "Error2: " + " " + rsp + " ";
                rspstmt = "Error2: " + "" + g.responseCodes(sft.ResponseCode) + "";
                break;
            case "1x":
            default:
                rspstmt = "Error2: kindly ask the receipient of the fund to verify";
                break;

        }
        //update the table with the response and sessioid for DC
        t.ResponseCode = sft.ResponseCode;
        t.Refid = Int32.Parse(logval);
        t.sessionid = sft.SessionID;
        int cn = trs.UpdateMobileTrans(t);
        
        return rspstmt;
    }

    public string NIPReversal(string logval)
    {
        //insert into the mobile reversal table
        Connect cn = new Connect("spd_mobileTrnxReverse");
        cn.addparam("@refid", logval);
        cn.addparam("@doneby", "AUTOSYSTEM");
        cn.addparam("@action", "reverse");
        cn.query();
        return "";
    }
    [WebMethod]
    public string NIBSSReversal(string sessionid,string bracodeval, string cusnumval, string curcodeval, string ledcodeval, string subacctval, string amt,string fee, string orignatorName, string DestinationBankCode, string ChannelCode, string AccountName, string AccountNumber, string Narration, string cusshowname)
    {
        string msg;
        string ledger = "";
        Gadget g = new Gadget();
        AccountService acs = new AccountService();
        Transaction t = new Transaction();
        TransactionService tsv = new TransactionService();

        t.bra_code = bracodeval;
        t.cusnum = cusnumval;
        t.curcode = curcodeval;
        t.ledcode = ledcodeval;
        t.subacctcode = subacctval;
        t.amount = decimal.Parse(amt);

        //go and get the operational fee/income ledger from database
        DataSet dsledger = tsv.getCurrentIncomeAcct();
        if (dsledger.Tables[0].Rows.Count > 0)
        {
            DataRow drledger = dsledger.Tables[0].Rows[0];
            ledger = drledger["ledcode"].ToString();
        }
        //ensure that the TSS and Income ledger for the approving branch exist
        if (!acs.checkTSSandFeesAccount(ledger, t.bra_code))
        {
            //accounts are not okay
            msg = "ERROR! \nKindly Contact the Branch Operation that Ledger:8720 has not been activated.  This transaction will not be processed.";
            return msg;
        }

        if (!acs.tssACCok) //is TSS ok?
        {
            //print err
            msg = "ERROR! \nKindly verify that your Branch's Clearing Account is active";
            return msg; //stop
        }

        if (!acs.feeACCok) //is Fee ok?
        {
            //print err
            msg = "Kindly verify that your Branch's Nibss Income Account is active";
            return msg; //stop
        }

        t.tellerID = "9990";
        //compute the amount to pay
        t.feecharge = acs.calculateFee(t.amount);

        t.origin_branch = t.bra_code;
        t.inCust.cus_sho_name = cusshowname;
        t.outCust.cusname = AccountName + "_Mobile Transaction:Reversal";

        t.inCust.bra_code = t.bra_code;
        t.inCust.cus_num = t.cusnum;
        t.inCust.cur_code = t.curcode;
        t.inCust.led_code = t.ledcode;
        t.inCust.sub_acct_code = t.subacctcode;

        string NewSessionid = sessionid;
        t.sessionid = NewSessionid;
        t.feecharge = decimal.Parse(fee);
        acs.authorizeTrnxReversalMobile(t);
        if (acs.Respreturnedcode1 != "0")
        {
            msg = "Reversal was not Successful";
            return msg;
        }
        else
        {
            return "Reversal was Successful";
        }
    }

    
}

