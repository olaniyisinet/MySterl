using System;
using System.Web;
using System.Collections;
using System.Web.Services;
using System.Web.Services.Protocols;


/// <summary>
/// Summary description for AutoRetry
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
public class AutoRetry : System.Web.Services.WebService {

    [WebMethod]
    public string AutoRetry_dcOnly(Int32 refid, string amt, string orignatorName, string DestinationBankCode,
        string ChannelCode, string AccountName, string AccountNumber, string paymentRef, string cusshowname)
    {

        string logval = "0";
        logval = refid.ToString();
        Gadget g = new Gadget();
        AccountService acs = new AccountService();
        Transaction t = new Transaction();
        TransactionService tsv = new TransactionService();
        string NewSessionid = g.newSessionId(DestinationBankCode);

        TR_SingleFundTransferDC sft = new TR_SingleFundTransferDC();
        sft.SessionID = NewSessionid;
        sft.DestinationBankCode = DestinationBankCode;
        sft.ChannelCode = ChannelCode;
        sft.AccountName = AccountName;
        sft.AccountNumber = AccountNumber;
        sft.OriginatorName = orignatorName;
        sft.Narration = "Transfer from " + cusshowname + " to " + AccountName;
        //if (paymentRef.Length > 100)
        //{
        //    paymentRef = paymentRef.Substring(0, 100);
        //}
        sft.PaymentReference = paymentRef;
        sft.Amount = amt;
        sft.createRequest();

        TransactionService trs = new TransactionService();
        //send Funds Transfer Request to NIBSS
        sft.sendRequest();

        string rspstmt = "";
        switch (sft.ResponseCode)
        {
            case "00":
                //success
                rspstmt = sft.ResponseCode;
                break;
            case "03": //txt = "Invalid sender"; break;
            case "05": //txt = "Do not honor"; break;
            case "06": //txt = "Dormant account"; break;
            case "07": //txt = "Invalid account"; break;
            case "08": //txt = "Account name mismatch"; break;
            case "09": //txt = "Request processing in progress"; break;
            case "12": //txt = "Invalid transaction"; break;
            case "13": //txt = "Invalid amount"; break;
            case "14": //txt = "Invalid Batch Number"; break;
            case "15": //txt = "Invalid Session or Record ID"; break;
            case "16": //txt = "Unknown Bank Code"; break;
            case "17": //txt = "Invalid Channel"; break;
            case "18": //txt = "Wrong Method Call"; break;
            case "21": //txt = "No action taken"; break;
            case "25": //txt = "Unable to locate record"; break;
            case "26": //txt = "Duplicate record"; break;
            case "30": //txt = "Wrong destination account format"; break;
            case "34": //txt = "Suspected fraud"; break;
            case "35": //txt = "Contact sending bank"; break;
            case "51": //txt = "No sufficient funds"; break;
            case "57": //txt = "Transaction not permitted to sender"; break;
            case "58": //txt = "Transaction not permitted on channel"; break;
            case "61": //txt = "Transfer Limit Exceeded"; break;
            case "63": //txt = "Security violation"; break;
            case "65": //txt = "Exceeds withdrawal frequency"; break;
            case "68": //txt = "Response received too late"; break;
            case "91": //txt = "Beneficiary Bank not available"; break;
            case "92": //txt = "Routing Error"; break;
            case "94": //txt = "Duplicate Transaction"; break;
            case "96": //txt = "Corresponding Bank is currently offline."; break;
            case "97": //txt = "Timeout waiting for response from destination."; break;
                string rsp = NIPReversal(logval);
                //rspstmt =  "Error: " + sft.ResponseCode + ", [" + rsp + "]";
                //rspstmt = "Error2: " + " " + rsp + " ";
                rspstmt = sft.ResponseCode;
                break;
            case "1x":
            default:
                rspstmt = sft.ResponseCode;
                break;

        }
        //update the table with the response and sessioid for DC
        t.ResponseCode = sft.ResponseCode;
        t.Refid = Int32.Parse(logval);
        t.sessionid = sft.SessionID;
        int cn = trs.UpdateMobileTrans(t);

        return rspstmt;
    }
    public string NIPReversal(string logval)
    {
        //insert into the mobile reversal table
        Connect cn = new Connect("spd_mobileTrnxReverse");
        cn.addparam("@refid", logval);
        cn.addparam("@doneby", "AUTOSYSTEM");
        cn.addparam("@action", "reverse");
        cn.query();
        return "";
    }
    
}

