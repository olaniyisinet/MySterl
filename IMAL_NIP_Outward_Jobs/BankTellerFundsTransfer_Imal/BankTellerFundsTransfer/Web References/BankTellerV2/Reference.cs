//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BankTellerFundsTransfer_imal.BankTellerV2 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="bankTellerSoap", Namespace="http://tempuri.org/")]
    public partial class bankTeller : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NameEnquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitandSendtoNIBSSOperationCompleted;
        
        private System.Threading.SendOrPostCallback NIBSSReversalOperationCompleted;
        
        private System.Threading.SendOrPostCallback requeryTrnxOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public bankTeller() {
            this.Url = global::BankTellerFundsTransfer_imal.Properties.Settings.Default.BankTellerFundsTransfer_imal_BankTellerV2_bankTeller;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NameEnquiryCompletedEventHandler NameEnquiryCompleted;
        
        /// <remarks/>
        public event DebitandSendtoNIBSSCompletedEventHandler DebitandSendtoNIBSSCompleted;
        
        /// <remarks/>
        public event NIBSSReversalCompletedEventHandler NIBSSReversalCompleted;
        
        /// <remarks/>
        public event requeryTrnxCompletedEventHandler requeryTrnxCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NameEnquiry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NameEnquiry(string SessionID, string DestinationBankCode, string ChannelCode, string AccountNumber) {
            object[] results = this.Invoke("NameEnquiry", new object[] {
                        SessionID,
                        DestinationBankCode,
                        ChannelCode,
                        AccountNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NameEnquiryAsync(string SessionID, string DestinationBankCode, string ChannelCode, string AccountNumber) {
            this.NameEnquiryAsync(SessionID, DestinationBankCode, ChannelCode, AccountNumber, null);
        }
        
        /// <remarks/>
        public void NameEnquiryAsync(string SessionID, string DestinationBankCode, string ChannelCode, string AccountNumber, object userState) {
            if ((this.NameEnquiryOperationCompleted == null)) {
                this.NameEnquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNameEnquiryOperationCompleted);
            }
            this.InvokeAsync("NameEnquiry", new object[] {
                        SessionID,
                        DestinationBankCode,
                        ChannelCode,
                        AccountNumber}, this.NameEnquiryOperationCompleted, userState);
        }
        
        private void OnNameEnquiryOperationCompleted(object arg) {
            if ((this.NameEnquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NameEnquiryCompleted(this, new NameEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DebitandSendtoNIBSS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DebitandSendtoNIBSS(
                    string sessionid, 
                    string bracodeval, 
                    string cusnumval, 
                    string curcodeval, 
                    string ledcodeval, 
                    string subacctval, 
                    string amt, 
                    string fee, 
                    string orignatorName, 
                    string DestinationBankCode, 
                    string ChannelCode, 
                    string AccountName, 
                    string AccountNumber, 
                    string paymentRef, 
                    string cusshowname, 
                    string tellerid, 
                    string BeneficiaryBankVerificationNumber, 
                    string BeneficiaryKYCLevel, 
                    string OriginatorAccountNumber, 
                    string OriginatorBankVerificationNumber, 
                    string OriginatorKYCLevel, 
                    string TransactionLocation, 
                    string NameEnquiryRef) {
            object[] results = this.Invoke("DebitandSendtoNIBSS", new object[] {
                        sessionid,
                        bracodeval,
                        cusnumval,
                        curcodeval,
                        ledcodeval,
                        subacctval,
                        amt,
                        fee,
                        orignatorName,
                        DestinationBankCode,
                        ChannelCode,
                        AccountName,
                        AccountNumber,
                        paymentRef,
                        cusshowname,
                        tellerid,
                        BeneficiaryBankVerificationNumber,
                        BeneficiaryKYCLevel,
                        OriginatorAccountNumber,
                        OriginatorBankVerificationNumber,
                        OriginatorKYCLevel,
                        TransactionLocation,
                        NameEnquiryRef});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DebitandSendtoNIBSSAsync(
                    string sessionid, 
                    string bracodeval, 
                    string cusnumval, 
                    string curcodeval, 
                    string ledcodeval, 
                    string subacctval, 
                    string amt, 
                    string fee, 
                    string orignatorName, 
                    string DestinationBankCode, 
                    string ChannelCode, 
                    string AccountName, 
                    string AccountNumber, 
                    string paymentRef, 
                    string cusshowname, 
                    string tellerid, 
                    string BeneficiaryBankVerificationNumber, 
                    string BeneficiaryKYCLevel, 
                    string OriginatorAccountNumber, 
                    string OriginatorBankVerificationNumber, 
                    string OriginatorKYCLevel, 
                    string TransactionLocation, 
                    string NameEnquiryRef) {
            this.DebitandSendtoNIBSSAsync(sessionid, bracodeval, cusnumval, curcodeval, ledcodeval, subacctval, amt, fee, orignatorName, DestinationBankCode, ChannelCode, AccountName, AccountNumber, paymentRef, cusshowname, tellerid, BeneficiaryBankVerificationNumber, BeneficiaryKYCLevel, OriginatorAccountNumber, OriginatorBankVerificationNumber, OriginatorKYCLevel, TransactionLocation, NameEnquiryRef, null);
        }
        
        /// <remarks/>
        public void DebitandSendtoNIBSSAsync(
                    string sessionid, 
                    string bracodeval, 
                    string cusnumval, 
                    string curcodeval, 
                    string ledcodeval, 
                    string subacctval, 
                    string amt, 
                    string fee, 
                    string orignatorName, 
                    string DestinationBankCode, 
                    string ChannelCode, 
                    string AccountName, 
                    string AccountNumber, 
                    string paymentRef, 
                    string cusshowname, 
                    string tellerid, 
                    string BeneficiaryBankVerificationNumber, 
                    string BeneficiaryKYCLevel, 
                    string OriginatorAccountNumber, 
                    string OriginatorBankVerificationNumber, 
                    string OriginatorKYCLevel, 
                    string TransactionLocation, 
                    string NameEnquiryRef, 
                    object userState) {
            if ((this.DebitandSendtoNIBSSOperationCompleted == null)) {
                this.DebitandSendtoNIBSSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitandSendtoNIBSSOperationCompleted);
            }
            this.InvokeAsync("DebitandSendtoNIBSS", new object[] {
                        sessionid,
                        bracodeval,
                        cusnumval,
                        curcodeval,
                        ledcodeval,
                        subacctval,
                        amt,
                        fee,
                        orignatorName,
                        DestinationBankCode,
                        ChannelCode,
                        AccountName,
                        AccountNumber,
                        paymentRef,
                        cusshowname,
                        tellerid,
                        BeneficiaryBankVerificationNumber,
                        BeneficiaryKYCLevel,
                        OriginatorAccountNumber,
                        OriginatorBankVerificationNumber,
                        OriginatorKYCLevel,
                        TransactionLocation,
                        NameEnquiryRef}, this.DebitandSendtoNIBSSOperationCompleted, userState);
        }
        
        private void OnDebitandSendtoNIBSSOperationCompleted(object arg) {
            if ((this.DebitandSendtoNIBSSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitandSendtoNIBSSCompleted(this, new DebitandSendtoNIBSSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NIBSSReversal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NIBSSReversal(string sessionid, string bracodeval, string cusnumval, string curcodeval, string ledcodeval, string subacctval, string amt, string fee, string orignatorName, string DestinationBankCode, string ChannelCode, string AccountName, string AccountNumber, string Narration, string cusshowname) {
            object[] results = this.Invoke("NIBSSReversal", new object[] {
                        sessionid,
                        bracodeval,
                        cusnumval,
                        curcodeval,
                        ledcodeval,
                        subacctval,
                        amt,
                        fee,
                        orignatorName,
                        DestinationBankCode,
                        ChannelCode,
                        AccountName,
                        AccountNumber,
                        Narration,
                        cusshowname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NIBSSReversalAsync(string sessionid, string bracodeval, string cusnumval, string curcodeval, string ledcodeval, string subacctval, string amt, string fee, string orignatorName, string DestinationBankCode, string ChannelCode, string AccountName, string AccountNumber, string Narration, string cusshowname) {
            this.NIBSSReversalAsync(sessionid, bracodeval, cusnumval, curcodeval, ledcodeval, subacctval, amt, fee, orignatorName, DestinationBankCode, ChannelCode, AccountName, AccountNumber, Narration, cusshowname, null);
        }
        
        /// <remarks/>
        public void NIBSSReversalAsync(
                    string sessionid, 
                    string bracodeval, 
                    string cusnumval, 
                    string curcodeval, 
                    string ledcodeval, 
                    string subacctval, 
                    string amt, 
                    string fee, 
                    string orignatorName, 
                    string DestinationBankCode, 
                    string ChannelCode, 
                    string AccountName, 
                    string AccountNumber, 
                    string Narration, 
                    string cusshowname, 
                    object userState) {
            if ((this.NIBSSReversalOperationCompleted == null)) {
                this.NIBSSReversalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNIBSSReversalOperationCompleted);
            }
            this.InvokeAsync("NIBSSReversal", new object[] {
                        sessionid,
                        bracodeval,
                        cusnumval,
                        curcodeval,
                        ledcodeval,
                        subacctval,
                        amt,
                        fee,
                        orignatorName,
                        DestinationBankCode,
                        ChannelCode,
                        AccountName,
                        AccountNumber,
                        Narration,
                        cusshowname}, this.NIBSSReversalOperationCompleted, userState);
        }
        
        private void OnNIBSSReversalOperationCompleted(object arg) {
            if ((this.NIBSSReversalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NIBSSReversalCompleted(this, new NIBSSReversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/requeryTrnx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string requeryTrnx(string sessionNE) {
            object[] results = this.Invoke("requeryTrnx", new object[] {
                        sessionNE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void requeryTrnxAsync(string sessionNE) {
            this.requeryTrnxAsync(sessionNE, null);
        }
        
        /// <remarks/>
        public void requeryTrnxAsync(string sessionNE, object userState) {
            if ((this.requeryTrnxOperationCompleted == null)) {
                this.requeryTrnxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequeryTrnxOperationCompleted);
            }
            this.InvokeAsync("requeryTrnx", new object[] {
                        sessionNE}, this.requeryTrnxOperationCompleted, userState);
        }
        
        private void OnrequeryTrnxOperationCompleted(object arg) {
            if ((this.requeryTrnxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requeryTrnxCompleted(this, new requeryTrnxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void NameEnquiryCompletedEventHandler(object sender, NameEnquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NameEnquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NameEnquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void DebitandSendtoNIBSSCompletedEventHandler(object sender, DebitandSendtoNIBSSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitandSendtoNIBSSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitandSendtoNIBSSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void NIBSSReversalCompletedEventHandler(object sender, NIBSSReversalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NIBSSReversalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NIBSSReversalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void requeryTrnxCompletedEventHandler(object sender, requeryTrnxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class requeryTrnxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal requeryTrnxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591